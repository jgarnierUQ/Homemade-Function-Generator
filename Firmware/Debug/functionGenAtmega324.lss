
functionGenAtmega324.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000432  00800100  000018c4  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000034d  00800532  00800532  00001d8a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018d3  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd2  00000000  00000000  00003873  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d9a  00000000  00000000  00004645  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  000053e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089f  00000000  00000000  00005844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3e  00000000  00000000  000060e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006f21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_20>
      54:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	15 e0       	ldi	r17, 0x05	; 5
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 ec       	ldi	r30, 0xC4	; 196
      90:	f8 e1       	ldi	r31, 0x18	; 24
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a2 33       	cpi	r26, 0x32	; 50
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e0       	ldi	r18, 0x08	; 8
      a0:	a2 e3       	ldi	r26, 0x32	; 50
      a2:	b5 e0       	ldi	r27, 0x05	; 5
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	af 37       	cpi	r26, 0x7F	; 127
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
      b2:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <handle_input>:
/**
  * @brief  Receives input chars that are sent from GUI and updates waves accordingly
  * @param  Character received from GUI
  * @retval None
  */
void handle_input(char rxChar) {
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
	if (rxChar == '<') {
      c6:	8c 33       	cpi	r24, 0x3C	; 60
      c8:	19 f4       	brne	.+6      	; 0xd0 <handle_input+0x16>
		//Start character
		paramCount = 0;		
      ca:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <paramCount>
      ce:	3b c1       	rjmp	.+630    	; 0x346 <handle_input+0x28c>
		
	} else if (rxChar == ',') {
      d0:	8c 32       	cpi	r24, 0x2C	; 44
      d2:	31 f4       	brne	.+12     	; 0xe0 <handle_input+0x26>
		//Next parameter
		paramCount++;
      d4:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <paramCount>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <paramCount>
      de:	33 c1       	rjmp	.+614    	; 0x346 <handle_input+0x28c>
		
	} else if (rxChar == '>') {		
      e0:	8e 33       	cpi	r24, 0x3E	; 62
      e2:	09 f0       	breq	.+2      	; 0xe6 <handle_input+0x2c>
      e4:	ad c0       	rjmp	.+346    	; 0x240 <handle_input+0x186>
		//Convert to ints and floats
		numWaveOneOrTwo = atoi(waveOneOrTwo);
      e6:	89 e4       	ldi	r24, 0x49	; 73
      e8:	95 e0       	ldi	r25, 0x05	; 5
      ea:	0e 94 33 09 	call	0x1266	; 0x1266 <atoi>
      ee:	c8 2f       	mov	r28, r24
      f0:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <numWaveOneOrTwo>
		numType = atoi(type);
      f4:	81 e4       	ldi	r24, 0x41	; 65
      f6:	95 e0       	ldi	r25, 0x05	; 5
      f8:	0e 94 33 09 	call	0x1266	; 0x1266 <atoi>
      fc:	8c 01       	movw	r16, r24
      fe:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <numType>
		numAmplitude = atoi(amplitude);
     102:	85 e4       	ldi	r24, 0x45	; 69
     104:	95 e0       	ldi	r25, 0x05	; 5
     106:	0e 94 33 09 	call	0x1266	; 0x1266 <atoi>
     10a:	d8 2f       	mov	r29, r24
     10c:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <numAmplitude>
		numOffset = atoi(offset);
     110:	8d e4       	ldi	r24, 0x4D	; 77
     112:	95 e0       	ldi	r25, 0x05	; 5
     114:	0e 94 33 09 	call	0x1266	; 0x1266 <atoi>
     118:	7c 01       	movw	r14, r24
     11a:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <numOffset>
		numFrequency = atoi(frequency);
     11e:	8b e3       	ldi	r24, 0x3B	; 59
     120:	95 e0       	ldi	r25, 0x05	; 5
     122:	0e 94 33 09 	call	0x1266	; 0x1266 <atoi>
     126:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <numFrequency+0x1>
     12a:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <numFrequency>
		
		//Update waves
		if (numWaveOneOrTwo == WAVE_1) {
     12e:	c1 30       	cpi	r28, 0x01	; 1
     130:	e9 f4       	brne	.+58     	; 0x16c <handle_input+0xb2>
			//Set new parameters
			waveOneType = numType;
     132:	00 93 39 05 	sts	0x0539, r16	; 0x800539 <waveOneType>
			waveOneAmplitude = numAmplitude;
     136:	d0 93 17 01 	sts	0x0117, r29	; 0x800117 <waveOneAmplitude>
			waveOneOffset = numOffset;
     13a:	e0 92 16 01 	sts	0x0116, r14	; 0x800116 <waveOneOffset>
			waveOneFrequency = numFrequency;
     13e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <waveOneFrequency+0x1>
     142:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <waveOneFrequency>
			
			//Update lookup table
			update_lookup_table(waveOneAmplitude, waveOneOffset, waveOneFrequency, WAVE_1, waveOneType);
     146:	11 27       	eor	r17, r17
     148:	b7 01       	movw	r22, r14
     14a:	77 27       	eor	r23, r23
     14c:	21 e0       	ldi	r18, 0x01	; 1
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	ac 01       	movw	r20, r24
     152:	8d 2f       	mov	r24, r29
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 27 06 	call	0xc4e	; 0xc4e <update_lookup_table>
			
			//Update Phase Accumulator
			init_phase_accumulator(waveOneFrequency, WAVE_1);
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <waveOneFrequency>
     162:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <waveOneFrequency+0x1>
     166:	0e 94 7d 06 	call	0xcfa	; 0xcfa <init_phase_accumulator>
     16a:	1e c0       	rjmp	.+60     	; 0x1a8 <handle_input+0xee>
			
		} else if (numWaveOneOrTwo == WAVE_2) {
     16c:	c2 30       	cpi	r28, 0x02	; 2
     16e:	e1 f4       	brne	.+56     	; 0x1a8 <handle_input+0xee>
			//Set new parameters
			waveTwoType = numType;
     170:	00 93 38 05 	sts	0x0538, r16	; 0x800538 <waveTwoType>
			waveTwoAmplitude = numAmplitude;
     174:	d0 93 13 01 	sts	0x0113, r29	; 0x800113 <waveTwoAmplitude>
			waveTwoOffset = numOffset;
     178:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <waveTwoOffset>
			waveTwoFrequency = numFrequency;
     17c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <waveTwoFrequency+0x1>
     180:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <waveTwoFrequency>
			
			//Update lookup table
			update_lookup_table(waveTwoAmplitude, waveTwoOffset, waveTwoFrequency, WAVE_2, waveTwoType);
     184:	11 27       	eor	r17, r17
     186:	b7 01       	movw	r22, r14
     188:	77 27       	eor	r23, r23
     18a:	22 e0       	ldi	r18, 0x02	; 2
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	ac 01       	movw	r20, r24
     190:	8d 2f       	mov	r24, r29
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 27 06 	call	0xc4e	; 0xc4e <update_lookup_table>
			
			//Update Phase Accumulator
			init_phase_accumulator(waveTwoFrequency, WAVE_2);
     198:	62 e0       	ldi	r22, 0x02	; 2
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <waveTwoFrequency>
     1a0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <waveTwoFrequency+0x1>
     1a4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <init_phase_accumulator>
		}
		
		//Clear strings
		memset(waveOneOrTwo,0,strlen(waveOneOrTwo));
     1a8:	e9 e4       	ldi	r30, 0x49	; 73
     1aa:	f5 e0       	ldi	r31, 0x05	; 5
     1ac:	01 90       	ld	r0, Z+
     1ae:	00 20       	and	r0, r0
     1b0:	e9 f7       	brne	.-6      	; 0x1ac <handle_input+0xf2>
     1b2:	31 97       	sbiw	r30, 0x01	; 1
     1b4:	af 01       	movw	r20, r30
     1b6:	49 54       	subi	r20, 0x49	; 73
     1b8:	55 40       	sbci	r21, 0x05	; 5
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	89 e4       	ldi	r24, 0x49	; 73
     1c0:	95 e0       	ldi	r25, 0x05	; 5
     1c2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <memset>
		memset(type,0,strlen(type));
     1c6:	e1 e4       	ldi	r30, 0x41	; 65
     1c8:	f5 e0       	ldi	r31, 0x05	; 5
     1ca:	01 90       	ld	r0, Z+
     1cc:	00 20       	and	r0, r0
     1ce:	e9 f7       	brne	.-6      	; 0x1ca <handle_input+0x110>
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	af 01       	movw	r20, r30
     1d4:	41 54       	subi	r20, 0x41	; 65
     1d6:	55 40       	sbci	r21, 0x05	; 5
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	81 e4       	ldi	r24, 0x41	; 65
     1de:	95 e0       	ldi	r25, 0x05	; 5
     1e0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <memset>
		memset(amplitude,0,strlen(amplitude));
     1e4:	e5 e4       	ldi	r30, 0x45	; 69
     1e6:	f5 e0       	ldi	r31, 0x05	; 5
     1e8:	01 90       	ld	r0, Z+
     1ea:	00 20       	and	r0, r0
     1ec:	e9 f7       	brne	.-6      	; 0x1e8 <handle_input+0x12e>
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	af 01       	movw	r20, r30
     1f2:	45 54       	subi	r20, 0x45	; 69
     1f4:	55 40       	sbci	r21, 0x05	; 5
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	85 e4       	ldi	r24, 0x45	; 69
     1fc:	95 e0       	ldi	r25, 0x05	; 5
     1fe:	0e 94 51 09 	call	0x12a2	; 0x12a2 <memset>
		memset(offset,0,strlen(offset));
     202:	ed e4       	ldi	r30, 0x4D	; 77
     204:	f5 e0       	ldi	r31, 0x05	; 5
     206:	01 90       	ld	r0, Z+
     208:	00 20       	and	r0, r0
     20a:	e9 f7       	brne	.-6      	; 0x206 <handle_input+0x14c>
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	af 01       	movw	r20, r30
     210:	4d 54       	subi	r20, 0x4D	; 77
     212:	55 40       	sbci	r21, 0x05	; 5
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	8d e4       	ldi	r24, 0x4D	; 77
     21a:	95 e0       	ldi	r25, 0x05	; 5
     21c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <memset>
		memset(frequency,0,strlen(frequency));
     220:	eb e3       	ldi	r30, 0x3B	; 59
     222:	f5 e0       	ldi	r31, 0x05	; 5
     224:	01 90       	ld	r0, Z+
     226:	00 20       	and	r0, r0
     228:	e9 f7       	brne	.-6      	; 0x224 <handle_input+0x16a>
     22a:	31 97       	sbiw	r30, 0x01	; 1
     22c:	af 01       	movw	r20, r30
     22e:	4b 53       	subi	r20, 0x3B	; 59
     230:	55 40       	sbci	r21, 0x05	; 5
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	8b e3       	ldi	r24, 0x3B	; 59
     238:	95 e0       	ldi	r25, 0x05	; 5
     23a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <memset>
     23e:	83 c0       	rjmp	.+262    	; 0x346 <handle_input+0x28c>

	} else {
		//Add the char to current parameter string
		switch (paramCount) {
     240:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <paramCount>
     244:	92 30       	cpi	r25, 0x02	; 2
     246:	d9 f1       	breq	.+118    	; 0x2be <handle_input+0x204>
     248:	28 f4       	brcc	.+10     	; 0x254 <handle_input+0x19a>
     24a:	99 23       	and	r25, r25
     24c:	51 f0       	breq	.+20     	; 0x262 <handle_input+0x1a8>
     24e:	91 30       	cpi	r25, 0x01	; 1
     250:	f9 f0       	breq	.+62     	; 0x290 <handle_input+0x1d6>
     252:	79 c0       	rjmp	.+242    	; 0x346 <handle_input+0x28c>
     254:	93 30       	cpi	r25, 0x03	; 3
     256:	09 f4       	brne	.+2      	; 0x25a <handle_input+0x1a0>
     258:	49 c0       	rjmp	.+146    	; 0x2ec <handle_input+0x232>
     25a:	94 30       	cpi	r25, 0x04	; 4
     25c:	09 f4       	brne	.+2      	; 0x260 <handle_input+0x1a6>
     25e:	5d c0       	rjmp	.+186    	; 0x31a <handle_input+0x260>
     260:	72 c0       	rjmp	.+228    	; 0x346 <handle_input+0x28c>
			case 0:
				sprintf(waveOneOrTwo, "%s%c", waveOneOrTwo, rxChar);
     262:	1f 92       	push	r1
     264:	8f 93       	push	r24
     266:	89 e4       	ldi	r24, 0x49	; 73
     268:	95 e0       	ldi	r25, 0x05	; 5
     26a:	9f 93       	push	r25
     26c:	8f 93       	push	r24
     26e:	28 e1       	ldi	r18, 0x18	; 24
     270:	35 e0       	ldi	r19, 0x05	; 5
     272:	3f 93       	push	r19
     274:	2f 93       	push	r18
     276:	9f 93       	push	r25
     278:	8f 93       	push	r24
     27a:	0e 94 76 09 	call	0x12ec	; 0x12ec <sprintf>
				break;
     27e:	8d b7       	in	r24, 0x3d	; 61
     280:	9e b7       	in	r25, 0x3e	; 62
     282:	08 96       	adiw	r24, 0x08	; 8
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	9e bf       	out	0x3e, r25	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	8d bf       	out	0x3d, r24	; 61
     28e:	5b c0       	rjmp	.+182    	; 0x346 <handle_input+0x28c>
										
			case 1:
				sprintf(type, "%s%c", type, rxChar);
     290:	1f 92       	push	r1
     292:	8f 93       	push	r24
     294:	81 e4       	ldi	r24, 0x41	; 65
     296:	95 e0       	ldi	r25, 0x05	; 5
     298:	9f 93       	push	r25
     29a:	8f 93       	push	r24
     29c:	28 e1       	ldi	r18, 0x18	; 24
     29e:	35 e0       	ldi	r19, 0x05	; 5
     2a0:	3f 93       	push	r19
     2a2:	2f 93       	push	r18
     2a4:	9f 93       	push	r25
     2a6:	8f 93       	push	r24
     2a8:	0e 94 76 09 	call	0x12ec	; 0x12ec <sprintf>
				break;
     2ac:	8d b7       	in	r24, 0x3d	; 61
     2ae:	9e b7       	in	r25, 0x3e	; 62
     2b0:	08 96       	adiw	r24, 0x08	; 8
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	9e bf       	out	0x3e, r25	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	8d bf       	out	0x3d, r24	; 61
     2bc:	44 c0       	rjmp	.+136    	; 0x346 <handle_input+0x28c>

			case 2:
				sprintf(amplitude, "%s%c", amplitude, rxChar);
     2be:	1f 92       	push	r1
     2c0:	8f 93       	push	r24
     2c2:	85 e4       	ldi	r24, 0x45	; 69
     2c4:	95 e0       	ldi	r25, 0x05	; 5
     2c6:	9f 93       	push	r25
     2c8:	8f 93       	push	r24
     2ca:	28 e1       	ldi	r18, 0x18	; 24
     2cc:	35 e0       	ldi	r19, 0x05	; 5
     2ce:	3f 93       	push	r19
     2d0:	2f 93       	push	r18
     2d2:	9f 93       	push	r25
     2d4:	8f 93       	push	r24
     2d6:	0e 94 76 09 	call	0x12ec	; 0x12ec <sprintf>
				break;
     2da:	8d b7       	in	r24, 0x3d	; 61
     2dc:	9e b7       	in	r25, 0x3e	; 62
     2de:	08 96       	adiw	r24, 0x08	; 8
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	9e bf       	out	0x3e, r25	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	8d bf       	out	0x3d, r24	; 61
     2ea:	2d c0       	rjmp	.+90     	; 0x346 <handle_input+0x28c>
				
			case 3:
				sprintf(offset, "%s%c", offset, rxChar);
     2ec:	1f 92       	push	r1
     2ee:	8f 93       	push	r24
     2f0:	8d e4       	ldi	r24, 0x4D	; 77
     2f2:	95 e0       	ldi	r25, 0x05	; 5
     2f4:	9f 93       	push	r25
     2f6:	8f 93       	push	r24
     2f8:	28 e1       	ldi	r18, 0x18	; 24
     2fa:	35 e0       	ldi	r19, 0x05	; 5
     2fc:	3f 93       	push	r19
     2fe:	2f 93       	push	r18
     300:	9f 93       	push	r25
     302:	8f 93       	push	r24
     304:	0e 94 76 09 	call	0x12ec	; 0x12ec <sprintf>
				break;
     308:	8d b7       	in	r24, 0x3d	; 61
     30a:	9e b7       	in	r25, 0x3e	; 62
     30c:	08 96       	adiw	r24, 0x08	; 8
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	9e bf       	out	0x3e, r25	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	8d bf       	out	0x3d, r24	; 61
     318:	16 c0       	rjmp	.+44     	; 0x346 <handle_input+0x28c>
				
			case 4:
				sprintf(frequency, "%s%c", frequency, rxChar);
     31a:	1f 92       	push	r1
     31c:	8f 93       	push	r24
     31e:	8b e3       	ldi	r24, 0x3B	; 59
     320:	95 e0       	ldi	r25, 0x05	; 5
     322:	9f 93       	push	r25
     324:	8f 93       	push	r24
     326:	28 e1       	ldi	r18, 0x18	; 24
     328:	35 e0       	ldi	r19, 0x05	; 5
     32a:	3f 93       	push	r19
     32c:	2f 93       	push	r18
     32e:	9f 93       	push	r25
     330:	8f 93       	push	r24
     332:	0e 94 76 09 	call	0x12ec	; 0x12ec <sprintf>
				break;
     336:	8d b7       	in	r24, 0x3d	; 61
     338:	9e b7       	in	r25, 0x3e	; 62
     33a:	08 96       	adiw	r24, 0x08	; 8
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	9e bf       	out	0x3e, r25	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	8d bf       	out	0x3d, r24	; 61
		}
	}
}
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	08 95       	ret

00000354 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
     354:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     358:	8c e5       	ldi	r24, 0x5C	; 92
     35a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     35e:	08 95       	ret

00000360 <i2c_start>:
     360:	94 ea       	ldi	r25, 0xA4	; 164
     362:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     366:	ec eb       	ldi	r30, 0xBC	; 188
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	90 81       	ld	r25, Z
     36c:	99 23       	and	r25, r25
     36e:	ec f7       	brge	.-6      	; 0x36a <i2c_start+0xa>
     370:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     374:	98 7f       	andi	r25, 0xF8	; 248
     376:	98 30       	cpi	r25, 0x08	; 8
     378:	11 f0       	breq	.+4      	; 0x37e <i2c_start+0x1e>
     37a:	90 31       	cpi	r25, 0x10	; 16
     37c:	a1 f4       	brne	.+40     	; 0x3a6 <i2c_start+0x46>
     37e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     382:	84 e8       	ldi	r24, 0x84	; 132
     384:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     388:	ec eb       	ldi	r30, 0xBC	; 188
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	88 23       	and	r24, r24
     390:	ec f7       	brge	.-6      	; 0x38c <i2c_start+0x2c>
     392:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     396:	98 7f       	andi	r25, 0xF8	; 248
     398:	98 31       	cpi	r25, 0x18	; 24
     39a:	39 f0       	breq	.+14     	; 0x3aa <i2c_start+0x4a>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 34       	cpi	r25, 0x40	; 64
     3a0:	29 f4       	brne	.+10     	; 0x3ac <i2c_start+0x4c>
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	08 95       	ret
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	08 95       	ret
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	08 95       	ret

000003ae <i2c_stop>:
     3ae:	84 e9       	ldi	r24, 0x94	; 148
     3b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3b4:	ec eb       	ldi	r30, 0xBC	; 188
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	84 fd       	sbrc	r24, 4
     3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <i2c_stop+0xa>
     3be:	08 95       	ret

000003c0 <i2c_write>:
     3c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3c4:	84 e8       	ldi	r24, 0x84	; 132
     3c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3ca:	ec eb       	ldi	r30, 0xBC	; 188
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	88 23       	and	r24, r24
     3d2:	ec f7       	brge	.-6      	; 0x3ce <i2c_write+0xe>
     3d4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3d8:	98 7f       	andi	r25, 0xF8	; 248
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	98 32       	cpi	r25, 0x28	; 40
     3de:	09 f4       	brne	.+2      	; 0x3e2 <i2c_write+0x22>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	08 95       	ret

000003e4 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     3e4:	84 e8       	ldi	r24, 0x84	; 132
     3e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     3ea:	ec eb       	ldi	r30, 0xBC	; 188
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	88 23       	and	r24, r24
     3f2:	ec f7       	brge	.-6      	; 0x3ee <i2c_readNak+0xa>
	
    return TWDR;
     3f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

     3f8:	08 95       	ret

000003fa <main>:
  * @retval None
  */
int main(void) {	
	
	//Set up pins as outputs
	DDRA = 0xFF;
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	81 b9       	out	0x01, r24	; 1
	DDRC = 0XFF;
     3fe:	87 b9       	out	0x07, r24	; 7
	DDRD = 0XFF;
     400:	8a b9       	out	0x0a, r24	; 10
	
	//Initalise timer and interrupt to fire at 50kHz
	init_timer_0();
     402:	0e 94 47 04 	call	0x88e	; 0x88e <init_timer_0>
	init_timer_1();
     406:	0e 94 58 04 	call	0x8b0	; 0x8b0 <init_timer_1>
	
	//Initialize USART
	init_serial_stdio(9600,0);
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	60 e8       	ldi	r22, 0x80	; 128
     40e:	75 e2       	ldi	r23, 0x25	; 37
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 a2 03 	call	0x744	; 0x744 <init_serial_stdio>
	
	//Initialise lookup tables
	update_lookup_table(waveOneAmplitude, waveOneOffset, waveOneFrequency, WAVE_1, waveOneType);
     418:	00 91 39 05 	lds	r16, 0x0539	; 0x800539 <waveOneType>
     41c:	10 e0       	ldi	r17, 0x00	; 0
     41e:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <waveOneFrequency>
     422:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <waveOneFrequency+0x1>
     426:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <waveOneOffset>
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <waveOneAmplitude>
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 27 06 	call	0xc4e	; 0xc4e <update_lookup_table>
	update_lookup_table(waveTwoAmplitude, waveTwoOffset, waveTwoFrequency, WAVE_2, waveTwoType);
     43a:	00 91 38 05 	lds	r16, 0x0538	; 0x800538 <waveTwoType>
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <waveTwoFrequency>
     444:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <waveTwoFrequency+0x1>
     448:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <waveTwoOffset>
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <waveTwoAmplitude>
     452:	22 e0       	ldi	r18, 0x02	; 2
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 27 06 	call	0xc4e	; 0xc4e <update_lookup_table>
	
	//Initialise phase accumulator values
	init_phase_accumulator(waveOneFrequency, WAVE_1);
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <waveOneFrequency>
     464:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <waveOneFrequency+0x1>
     468:	0e 94 7d 06 	call	0xcfa	; 0xcfa <init_phase_accumulator>
	init_phase_accumulator(waveTwoFrequency, WAVE_2);
     46c:	62 e0       	ldi	r22, 0x02	; 2
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <waveTwoFrequency>
     474:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <waveTwoFrequency+0x1>
     478:	0e 94 7d 06 	call	0xcfa	; 0xcfa <init_phase_accumulator>
	
	//Initialise I2C communication
	i2c_init();
     47c:	0e 94 aa 01 	call	0x354	; 0x354 <i2c_init>
	
	//Turn on global interrupts
	sei();
     480:	78 94       	sei
	printf("starting again\n\r");
     482:	8d e1       	ldi	r24, 0x1D	; 29
     484:	95 e0       	ldi	r25, 0x05	; 5
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <printf>
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
	//Main loop - Everything handled by interrupts
	while (1) {
		if (tempFlag == 0) {
			//Send temp
			temp = read_temp();
			printf("%d\n", temp);
     492:	ce e2       	ldi	r28, 0x2E	; 46
     494:	d5 e0       	ldi	r29, 0x05	; 5
			tempFlag = NOT_SET;
     496:	01 e0       	ldi	r16, 0x01	; 1
     498:	10 e0       	ldi	r17, 0x00	; 0
	//Turn on global interrupts
	sei();
	printf("starting again\n\r");
	//Main loop - Everything handled by interrupts
	while (1) {
		if (tempFlag == 0) {
     49a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     49e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     4a2:	89 2b       	or	r24, r25
     4a4:	a1 f4       	brne	.+40     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			//Send temp
			temp = read_temp();
     4a6:	0e 94 29 04 	call	0x852	; 0x852 <read_temp>
     4aa:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <__data_end>
     4ae:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <__data_end+0x1>
			printf("%d\n", temp);
     4b2:	9f 93       	push	r25
     4b4:	8f 93       	push	r24
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	0e 94 60 09 	call	0x12c0	; 0x12c0 <printf>
			tempFlag = NOT_SET;
     4be:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__data_start+0x1>
     4c2:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ce:	00 00       	nop
     4d0:	e4 cf       	rjmp	.-56     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>

000004d2 <__vector_16>:
		_delay_us(1);
	}
}

//Timer interrupt to increment lookup table index - WAVE 2
ISR(TIMER0_COMPA_vect) {
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	8f 93       	push	r24
     4de:	9f 93       	push	r25
	if (tempCounter == 100) { //Every second
     4e0:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <tempCounter>
     4e4:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <tempCounter+0x1>
     4e8:	84 36       	cpi	r24, 0x64	; 100
     4ea:	91 05       	cpc	r25, r1
     4ec:	41 f4       	brne	.+16     	; 0x4fe <__vector_16+0x2c>
		//Set flag to read temperature
		tempFlag = SET;
     4ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     4f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		tempCounter = 0;
     4f6:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <tempCounter+0x1>
     4fa:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <tempCounter>
	}
	tempCounter++;
     4fe:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <tempCounter>
     502:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <tempCounter+0x1>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <tempCounter+0x1>
     50c:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <tempCounter>
}
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	0f 90       	pop	r0
     516:	0f be       	out	0x3f, r0	; 63
     518:	0f 90       	pop	r0
     51a:	1f 90       	pop	r1
     51c:	18 95       	reti

0000051e <__vector_13>:

//Timer interrupt to increment lookup table index - WAVE 1
ISR(TIMER1_COMPA_vect) {
     51e:	1f 92       	push	r1
     520:	0f 92       	push	r0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	0f 92       	push	r0
     526:	11 24       	eor	r1, r1
     528:	2f 93       	push	r18
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	//Compute DAC1 value
	index1 = (uint8_t) (accumulator1 >> 24) & 0xFF;
     53e:	40 91 75 08 	lds	r20, 0x0875	; 0x800875 <accumulator1>
     542:	50 91 76 08 	lds	r21, 0x0876	; 0x800876 <accumulator1+0x1>
     546:	60 91 77 08 	lds	r22, 0x0877	; 0x800877 <accumulator1+0x2>
     54a:	70 91 78 08 	lds	r23, 0x0878	; 0x800878 <accumulator1+0x3>
     54e:	87 2f       	mov	r24, r23
     550:	99 27       	eor	r25, r25
     552:	aa 27       	eor	r26, r26
     554:	bb 27       	eor	r27, r27
     556:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <index1>
	outputValue1 = outputWave1[index1];
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	fc 01       	movw	r30, r24
     55e:	ef 58       	subi	r30, 0x8F	; 143
     560:	f8 4f       	sbci	r31, 0xF8	; 248
     562:	20 81       	ld	r18, Z
     564:	20 93 54 05 	sts	0x0554, r18	; 0x800554 <outputValue1>
	accumulator1 += phase1;
     568:	80 91 71 08 	lds	r24, 0x0871	; 0x800871 <phase1>
     56c:	90 91 72 08 	lds	r25, 0x0872	; 0x800872 <phase1+0x1>
     570:	a0 91 73 08 	lds	r26, 0x0873	; 0x800873 <phase1+0x2>
     574:	b0 91 74 08 	lds	r27, 0x0874	; 0x800874 <phase1+0x3>
     578:	48 0f       	add	r20, r24
     57a:	59 1f       	adc	r21, r25
     57c:	6a 1f       	adc	r22, r26
     57e:	7b 1f       	adc	r23, r27
     580:	40 93 75 08 	sts	0x0875, r20	; 0x800875 <accumulator1>
     584:	50 93 76 08 	sts	0x0876, r21	; 0x800876 <accumulator1+0x1>
     588:	60 93 77 08 	sts	0x0877, r22	; 0x800877 <accumulator1+0x2>
     58c:	70 93 78 08 	sts	0x0878, r23	; 0x800878 <accumulator1+0x3>
	
	//Compute DAC2 value
	index2 = (uint8_t) (accumulator2 >> 24) & 0xFF;
     590:	40 91 6d 06 	lds	r20, 0x066D	; 0x80066d <accumulator2>
     594:	50 91 6e 06 	lds	r21, 0x066E	; 0x80066e <accumulator2+0x1>
     598:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <accumulator2+0x2>
     59c:	70 91 70 06 	lds	r23, 0x0670	; 0x800670 <accumulator2+0x3>
     5a0:	87 2f       	mov	r24, r23
     5a2:	99 27       	eor	r25, r25
     5a4:	aa 27       	eor	r26, r26
     5a6:	bb 27       	eor	r27, r27
     5a8:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <index2>
	outputValue2 = outputWave2[index2];
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	fc 01       	movw	r30, r24
     5b0:	ef 58       	subi	r30, 0x8F	; 143
     5b2:	f9 4f       	sbci	r31, 0xF9	; 249
     5b4:	80 81       	ld	r24, Z
     5b6:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <outputValue2>
	accumulator2 += phase2;
     5ba:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <phase2>
     5be:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <phase2+0x1>
     5c2:	a0 91 6b 06 	lds	r26, 0x066B	; 0x80066b <phase2+0x2>
     5c6:	b0 91 6c 06 	lds	r27, 0x066C	; 0x80066c <phase2+0x3>
     5ca:	48 0f       	add	r20, r24
     5cc:	59 1f       	adc	r21, r25
     5ce:	6a 1f       	adc	r22, r26
     5d0:	7b 1f       	adc	r23, r27
     5d2:	40 93 6d 06 	sts	0x066D, r20	; 0x80066d <accumulator2>
     5d6:	50 93 6e 06 	sts	0x066E, r21	; 0x80066e <accumulator2+0x1>
     5da:	60 93 6f 06 	sts	0x066F, r22	; 0x80066f <accumulator2+0x2>
     5de:	70 93 70 06 	sts	0x0670, r23	; 0x800670 <accumulator2+0x3>
	
	//Output to DAC1
	PORTA = (outputValue1 & 0xFF);
     5e2:	22 b9       	out	0x02, r18	; 2
	
	//Output to DAC2
	PORTD = (outputValue2 & 0b11111100);
     5e4:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <outputValue2>
     5e8:	8c 7f       	andi	r24, 0xFC	; 252
     5ea:	8b b9       	out	0x0b, r24	; 11
	PORTC = ((outputValue2 << 6) & 0b11000000);
     5ec:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <outputValue2>
     5f0:	20 e4       	ldi	r18, 0x40	; 64
     5f2:	82 9f       	mul	r24, r18
     5f4:	c0 01       	movw	r24, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	88 b9       	out	0x08, r24	; 8
}
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	2f 91       	pop	r18
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <__vector_20>:

ISR(USART0_RX_vect) {
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	0f 92       	push	r0
     622:	11 24       	eor	r1, r1
     624:	1f 93       	push	r17
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	ef 93       	push	r30
     640:	ff 93       	push	r31
	//Interrupt entered - char has been received
	char input;

	//Extract character from UART Data register and place in input variable
	input = UDR0;
     642:	c6 ec       	ldi	r28, 0xC6	; 198
     644:	d0 e0       	ldi	r29, 0x00	; 0
     646:	18 81       	ld	r17, Y

	//Handle received char
	handle_input(input);
     648:	81 2f       	mov	r24, r17
     64a:	0e 94 5d 00 	call	0xba	; 0xba <handle_input>
	UDR0 = input;
     64e:	18 83       	st	Y, r17
     650:	ff 91       	pop	r31
     652:	ef 91       	pop	r30
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	1f 91       	pop	r17
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
     678:	cf 93       	push	r28
     67a:	c8 2f       	mov	r28, r24
     67c:	8a 30       	cpi	r24, 0x0A	; 10
     67e:	19 f4       	brne	.+6      	; 0x686 <uart_put_char+0xe>
     680:	8d e0       	ldi	r24, 0x0D	; 13
     682:	0e 94 3c 03 	call	0x678	; 0x678 <uart_put_char>
     686:	9f b7       	in	r25, 0x3f	; 63
     688:	90 78       	andi	r25, 0x80	; 128
     68a:	02 c0       	rjmp	.+4      	; 0x690 <uart_put_char+0x18>
     68c:	99 23       	and	r25, r25
     68e:	29 f1       	breq	.+74     	; 0x6da <uart_put_char+0x62>
     690:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bytes_in_out_buffer>
     694:	8f 3f       	cpi	r24, 0xFF	; 255
     696:	d1 f3       	breq	.-12     	; 0x68c <uart_put_char+0x14>
     698:	f8 94       	cli
     69a:	e0 91 55 05 	lds	r30, 0x0555	; 0x800555 <out_insert_pos>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	8e 0f       	add	r24, r30
     6a2:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <out_insert_pos>
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	e9 5a       	subi	r30, 0xA9	; 169
     6aa:	fa 4f       	sbci	r31, 0xFA	; 250
     6ac:	c0 83       	st	Z, r28
     6ae:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bytes_in_out_buffer>
     6b2:	8f 5f       	subi	r24, 0xFF	; 255
     6b4:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <bytes_in_out_buffer>
     6b8:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <out_insert_pos>
     6bc:	8f 3f       	cpi	r24, 0xFF	; 255
     6be:	11 f4       	brne	.+4      	; 0x6c4 <uart_put_char+0x4c>
     6c0:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <out_insert_pos>
     6c4:	e1 ec       	ldi	r30, 0xC1	; 193
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	80 62       	ori	r24, 0x20	; 32
     6cc:	80 83       	st	Z, r24
     6ce:	99 23       	and	r25, r25
     6d0:	39 f0       	breq	.+14     	; 0x6e0 <uart_put_char+0x68>
     6d2:	78 94       	sei
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <uart_put_char+0x6c>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <uart_put_char+0x6c>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <uart_get_char>:
     6e8:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <bytes_in_input_buffer>
     6ec:	88 23       	and	r24, r24
     6ee:	e1 f3       	breq	.-8      	; 0x6e8 <uart_get_char>
     6f0:	2f b7       	in	r18, 0x3f	; 63
     6f2:	20 78       	andi	r18, 0x80	; 128
     6f4:	f8 94       	cli
     6f6:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <input_insert_pos>
     6fa:	30 91 68 06 	lds	r19, 0x0668	; 0x800668 <bytes_in_input_buffer>
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	83 1b       	sub	r24, r19
     702:	91 09       	sbc	r25, r1
     704:	5a f4       	brpl	.+22     	; 0x71c <uart_get_char+0x34>
     706:	e0 91 56 06 	lds	r30, 0x0656	; 0x800656 <input_insert_pos>
     70a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <bytes_in_input_buffer>
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	e8 1b       	sub	r30, r24
     712:	f1 09       	sbc	r31, r1
     714:	e9 59       	subi	r30, 0x99	; 153
     716:	f9 4f       	sbci	r31, 0xF9	; 249
     718:	80 81       	ld	r24, Z
     71a:	0a c0       	rjmp	.+20     	; 0x730 <uart_get_char+0x48>
     71c:	e0 91 56 06 	lds	r30, 0x0656	; 0x800656 <input_insert_pos>
     720:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <bytes_in_input_buffer>
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	e8 1b       	sub	r30, r24
     728:	f1 09       	sbc	r31, r1
     72a:	e9 5a       	subi	r30, 0xA9	; 169
     72c:	f9 4f       	sbci	r31, 0xF9	; 249
     72e:	80 81       	ld	r24, Z
     730:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <bytes_in_input_buffer>
     734:	91 50       	subi	r25, 0x01	; 1
     736:	90 93 68 06 	sts	0x0668, r25	; 0x800668 <bytes_in_input_buffer>
     73a:	22 23       	and	r18, r18
     73c:	09 f0       	breq	.+2      	; 0x740 <uart_get_char+0x58>
     73e:	78 94       	sei
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	08 95       	ret

00000744 <init_serial_stdio>:
     744:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <out_insert_pos>
     748:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <bytes_in_out_buffer>
     74c:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <input_insert_pos>
     750:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <bytes_in_input_buffer>
     754:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <input_overrun>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	aa 1f       	adc	r26, r26
     762:	bb 1f       	adc	r27, r27
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	aa 1f       	adc	r26, r26
     76a:	bb 1f       	adc	r27, r27
     76c:	9c 01       	movw	r18, r24
     76e:	ad 01       	movw	r20, r26
     770:	22 0f       	add	r18, r18
     772:	33 1f       	adc	r19, r19
     774:	44 1f       	adc	r20, r20
     776:	55 1f       	adc	r21, r21
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	7d e2       	ldi	r23, 0x2D	; 45
     77c:	81 e3       	ldi	r24, 0x31	; 49
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__divmodsi4>
     784:	ba 01       	movw	r22, r20
     786:	a9 01       	movw	r20, r18
     788:	4f 5f       	subi	r20, 0xFF	; 255
     78a:	5f 4f       	sbci	r21, 0xFF	; 255
     78c:	6f 4f       	sbci	r22, 0xFF	; 255
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	db 01       	movw	r26, r22
     792:	ca 01       	movw	r24, r20
     794:	1a f4       	brpl	.+6      	; 0x79c <init_serial_stdio+0x58>
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	a1 1d       	adc	r26, r1
     79a:	b1 1d       	adc	r27, r1
     79c:	b5 95       	asr	r27
     79e:	a7 95       	ror	r26
     7a0:	97 95       	ror	r25
     7a2:	87 95       	ror	r24
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     7aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     7ae:	e1 ec       	ldi	r30, 0xC1	; 193
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	88 e1       	ldi	r24, 0x18	; 24
     7b4:	80 83       	st	Z, r24
     7b6:	80 81       	ld	r24, Z
     7b8:	80 68       	ori	r24, 0x80	; 128
     7ba:	80 83       	st	Z, r24
     7bc:	e9 e7       	ldi	r30, 0x79	; 121
     7be:	f8 e0       	ldi	r31, 0x08	; 8
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	93 83       	std	Z+3, r25	; 0x03
     7c6:	82 83       	std	Z+2, r24	; 0x02
     7c8:	91 83       	std	Z+1, r25	; 0x01
     7ca:	80 83       	st	Z, r24
     7cc:	08 95       	ret

000007ce <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	2f 93       	push	r18
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	ef 93       	push	r30
     7e0:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     7e2:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bytes_in_out_buffer>
     7e6:	88 23       	and	r24, r24
     7e8:	29 f1       	breq	.+74     	; 0x834 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     7ea:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <out_insert_pos>
     7ee:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <bytes_in_out_buffer>
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	82 1b       	sub	r24, r18
     7f6:	91 09       	sbc	r25, r1
     7f8:	5a f4       	brpl	.+22     	; 0x810 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     7fa:	e0 91 55 05 	lds	r30, 0x0555	; 0x800555 <out_insert_pos>
     7fe:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	e8 1b       	sub	r30, r24
     806:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     808:	ea 5a       	subi	r30, 0xAA	; 170
     80a:	f9 4f       	sbci	r31, 0xF9	; 249
     80c:	90 81       	ld	r25, Z
     80e:	0a c0       	rjmp	.+20     	; 0x824 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     810:	e0 91 55 05 	lds	r30, 0x0555	; 0x800555 <out_insert_pos>
     814:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bytes_in_out_buffer>
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	e8 1b       	sub	r30, r24
     81c:	f1 09       	sbc	r31, r1
     81e:	e9 5a       	subi	r30, 0xA9	; 169
     820:	fa 4f       	sbci	r31, 0xFA	; 250
     822:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     824:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bytes_in_out_buffer>
     828:	81 50       	subi	r24, 0x01	; 1
     82a:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     82e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     832:	05 c0       	rjmp	.+10     	; 0x83e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     834:	e1 ec       	ldi	r30, 0xC1	; 193
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	8f 7d       	andi	r24, 0xDF	; 223
     83c:	80 83       	st	Z, r24
	}
}
     83e:	ff 91       	pop	r31
     840:	ef 91       	pop	r30
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	2f 91       	pop	r18
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <read_temp>:
/**
  * @brief  Reads the temperature of the DS1621 through I2C
  * @param  None
  * @retval Temperature as read through the sensor
  */
int read_temp() {
     852:	cf 93       	push	r28
	int err;
	
	/*for (int i = 0; i < 0x78; i++) {
		i2c_start(i << 1);
 	}*/
	err = i2c_start(ADDRESS_WRITE);
     854:	80 e9       	ldi	r24, 0x90	; 144
     856:	0e 94 b0 01 	call	0x360	; 0x360 <i2c_start>
	if (err == 1) {
     85a:	81 30       	cpi	r24, 0x01	; 1
     85c:	a1 f0       	breq	.+40     	; 0x886 <read_temp+0x34>
		//printf("No device\n\r");
		return 1000;
	}
	i2c_write(0xEE);
     85e:	8e ee       	ldi	r24, 0xEE	; 238
     860:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <i2c_write>
	// Config reg read
	i2c_start(ADDRESS_WRITE);
     864:	80 e9       	ldi	r24, 0x90	; 144
     866:	0e 94 b0 01 	call	0x360	; 0x360 <i2c_start>
	i2c_write(0xAA); 
     86a:	8a ea       	ldi	r24, 0xAA	; 170
     86c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <i2c_write>
	i2c_start(ADDRESS_READ);
     870:	81 e9       	ldi	r24, 0x91	; 145
     872:	0e 94 b0 01 	call	0x360	; 0x360 <i2c_start>
	result = i2c_read(0);
     876:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_readNak>
     87a:	c8 2f       	mov	r28, r24
	i2c_stop();
     87c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <i2c_stop>
	return result;
     880:	8c 2f       	mov	r24, r28
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <read_temp+0x38>
		i2c_start(i << 1);
 	}*/
	err = i2c_start(ADDRESS_WRITE);
	if (err == 1) {
		//printf("No device\n\r");
		return 1000;
     886:	88 ee       	ldi	r24, 0xE8	; 232
     888:	93 e0       	ldi	r25, 0x03	; 3
	i2c_write(0xAA); 
	i2c_start(ADDRESS_READ);
	result = i2c_read(0);
	i2c_stop();
	return result;
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <init_timer_0>:
  * @param  None
  * @retval None
  */
void init_timer_0(void) {
	//OCR0A = Clock/(Prescalar * Rate) - 1
	OCR0A = 194;
     88e:	82 ec       	ldi	r24, 0xC2	; 194
     890:	87 bd       	out	0x27, r24	; 39
	
	//Clear on compare match
	TCCR0A |= (0 << COM0A1) | (0 << COM0A0);
     892:	84 b5       	in	r24, 0x24	; 36
     894:	84 bd       	out	0x24, r24	; 36
	
	//CTC mode
	TCCR0A |= (0 << WGM02) | (1 << WGM01) | (0 << WGM00);
     896:	84 b5       	in	r24, 0x24	; 36
     898:	82 60       	ori	r24, 0x02	; 2
     89a:	84 bd       	out	0x24, r24	; 36
	
	//1024 Prescalar
	TCCR0B |= (1 << CS02) | (0 << CS01) | (1 << CS00);
     89c:	85 b5       	in	r24, 0x25	; 37
     89e:	85 60       	ori	r24, 0x05	; 5
     8a0:	85 bd       	out	0x25, r24	; 37
	
	//Enable the particular interrupt
	TIMSK0 |= (1 << OCIE0A);
     8a2:	ee e6       	ldi	r30, 0x6E	; 110
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	82 60       	ori	r24, 0x02	; 2
     8aa:	80 83       	st	Z, r24
	
	//Clear specific interrupt flag
	TIFR0 |= (1 << OCF0A);
     8ac:	a9 9a       	sbi	0x15, 1	; 21
     8ae:	08 95       	ret

000008b0 <init_timer_1>:
  * @retval None
  */
void init_timer_1(void) {
	//OCR1A = Clock/(Prescalar * Rate) - 1
	//399 = 50kHz
	OCR1A = 199;
     8b0:	87 ec       	ldi	r24, 0xC7	; 199
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	 //CTC mode
	TCCR1A = 0;
     8bc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	//No Prescaler - CTC Mode
	TCCR1B = (1<<WGM12) | (1<<CS10) | (0 <<CS11) | (0 << CS12); 
     8c0:	89 e0       	ldi	r24, 0x09	; 9
     8c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	//Enable interrupt on timer on output compare match
	TIMSK1 = (1<<OCIE1A); 
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	//Ensure interrupt flag is cleared
	TIFR1 = (1<<OCF1A);
     8cc:	86 bb       	out	0x16, r24	; 22
     8ce:	08 95       	ret

000008d0 <generate_wave>:
/**
  * @brief  Generates the lookup table values for a sine wave with amplitude and offset taken into account
  * @param  Sine value for normal +/-3V wave with no offset, max amplitude, desired offset, frequency, type of wave
  * @retval Lookup table value
  */
int generate_wave(int index, int amplitude, int offset, int frequency, int type) {
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	7c 01       	movw	r14, r24
	
	//Calculate the offset required
	if (offset < 128) {
		scaledOffset = -1 * (128 - offset);
	} else {
		scaledOffset = offset - 128;
     8ea:	ea 01       	movw	r28, r20
     8ec:	c0 58       	subi	r28, 0x80	; 128
     8ee:	d1 09       	sbc	r29, r1
	}
	int byte;
	
	//Manipulate value of lookup table
	switch (type) {
     8f0:	02 30       	cpi	r16, 0x02	; 2
     8f2:	11 05       	cpc	r17, r1
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <generate_wave+0x28>
     8f6:	b0 c0       	rjmp	.+352    	; 0xa58 <__stack+0x159>
     8f8:	44 f4       	brge	.+16     	; 0x90a <__stack+0xb>
     8fa:	01 15       	cp	r16, r1
     8fc:	11 05       	cpc	r17, r1
     8fe:	71 f0       	breq	.+28     	; 0x91c <__stack+0x1d>
     900:	01 30       	cpi	r16, 0x01	; 1
     902:	11 05       	cpc	r17, r1
     904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
     906:	59 c0       	rjmp	.+178    	; 0x9ba <__stack+0xbb>
     908:	94 c1       	rjmp	.+808    	; 0xc32 <__stack+0x333>
     90a:	03 30       	cpi	r16, 0x03	; 3
     90c:	11 05       	cpc	r17, r1
     90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
     910:	f2 c0       	rjmp	.+484    	; 0xaf6 <__stack+0x1f7>
     912:	04 30       	cpi	r16, 0x04	; 4
     914:	11 05       	cpc	r17, r1
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	3e c1       	rjmp	.+636    	; 0xb96 <__stack+0x297>
     91a:	8b c1       	rjmp	.+790    	; 0xc32 <__stack+0x333>
		case SINE:
			output = (amplitude / 255.0) * sineLookup[index] + ((255.0 - amplitude) / 255.0) * 128.0 + scaledOffset;
     91c:	07 2e       	mov	r0, r23
     91e:	00 0c       	add	r0, r0
     920:	88 0b       	sbc	r24, r24
     922:	99 0b       	sbc	r25, r25
     924:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     928:	4b 01       	movw	r8, r22
     92a:	5c 01       	movw	r10, r24
     92c:	f7 01       	movw	r30, r14
     92e:	e8 5e       	subi	r30, 0xE8	; 232
     930:	fb 4f       	sbci	r31, 0xFB	; 251
     932:	60 81       	ld	r22, Z
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     93e:	6b 01       	movw	r12, r22
     940:	7c 01       	movw	r14, r24
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	4f e7       	ldi	r20, 0x7F	; 127
     948:	53 e4       	ldi	r21, 0x43	; 67
     94a:	c5 01       	movw	r24, r10
     94c:	b4 01       	movw	r22, r8
     94e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     952:	9b 01       	movw	r18, r22
     954:	ac 01       	movw	r20, r24
     956:	c7 01       	movw	r24, r14
     958:	b6 01       	movw	r22, r12
     95a:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     95e:	6b 01       	movw	r12, r22
     960:	7c 01       	movw	r14, r24
     962:	a5 01       	movw	r20, r10
     964:	94 01       	movw	r18, r8
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	8f e7       	ldi	r24, 0x7F	; 127
     96c:	93 e4       	ldi	r25, 0x43	; 67
     96e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__subsf3>
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	4f e7       	ldi	r20, 0x7F	; 127
     978:	53 e4       	ldi	r21, 0x43	; 67
     97a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	53 e4       	ldi	r21, 0x43	; 67
     986:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     996:	6b 01       	movw	r12, r22
     998:	7c 01       	movw	r14, r24
     99a:	be 01       	movw	r22, r28
     99c:	dd 0f       	add	r29, r29
     99e:	88 0b       	sbc	r24, r24
     9a0:	99 0b       	sbc	r25, r25
     9a2:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     9a6:	9b 01       	movw	r18, r22
     9a8:	ac 01       	movw	r20, r24
     9aa:	c7 01       	movw	r24, r14
     9ac:	b6 01       	movw	r22, r12
     9ae:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     9b2:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fixsfsi>
     9b6:	9b 01       	movw	r18, r22
			break;
     9b8:	3c c1       	rjmp	.+632    	; 0xc32 <__stack+0x333>
			
		case TRIANGLE:
			output = (amplitude / 255.0) * triangleLookup[index] + ((255.0 - amplitude) / 255.0) * 128.0 + scaledOffset;
     9ba:	07 2e       	mov	r0, r23
     9bc:	00 0c       	add	r0, r0
     9be:	88 0b       	sbc	r24, r24
     9c0:	99 0b       	sbc	r25, r25
     9c2:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     9c6:	4b 01       	movw	r8, r22
     9c8:	5c 01       	movw	r10, r24
     9ca:	f7 01       	movw	r30, r14
     9cc:	e8 5e       	subi	r30, 0xE8	; 232
     9ce:	fc 4f       	sbci	r31, 0xFC	; 252
     9d0:	60 81       	ld	r22, Z
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     9dc:	6b 01       	movw	r12, r22
     9de:	7c 01       	movw	r14, r24
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	4f e7       	ldi	r20, 0x7F	; 127
     9e6:	53 e4       	ldi	r21, 0x43	; 67
     9e8:	c5 01       	movw	r24, r10
     9ea:	b4 01       	movw	r22, r8
     9ec:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	c7 01       	movw	r24, r14
     9f6:	b6 01       	movw	r22, r12
     9f8:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     9fc:	6b 01       	movw	r12, r22
     9fe:	7c 01       	movw	r14, r24
     a00:	a5 01       	movw	r20, r10
     a02:	94 01       	movw	r18, r8
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	8f e7       	ldi	r24, 0x7F	; 127
     a0a:	93 e4       	ldi	r25, 0x43	; 67
     a0c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__subsf3>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	4f e7       	ldi	r20, 0x7F	; 127
     a16:	53 e4       	ldi	r21, 0x43	; 67
     a18:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	53 e4       	ldi	r21, 0x43	; 67
     a24:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	c7 01       	movw	r24, r14
     a2e:	b6 01       	movw	r22, r12
     a30:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     a34:	6b 01       	movw	r12, r22
     a36:	7c 01       	movw	r14, r24
     a38:	be 01       	movw	r22, r28
     a3a:	dd 0f       	add	r29, r29
     a3c:	88 0b       	sbc	r24, r24
     a3e:	99 0b       	sbc	r25, r25
     a40:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	c7 01       	movw	r24, r14
     a4a:	b6 01       	movw	r22, r12
     a4c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     a50:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fixsfsi>
     a54:	9b 01       	movw	r18, r22
			break;
     a56:	ed c0       	rjmp	.+474    	; 0xc32 <__stack+0x333>
			
		case SAWTOOTH:
			output = (amplitude / 255.0) * sawToothLookup[index] + ((255.0 - amplitude) / 255.0) * 128.0 + scaledOffset;
     a58:	07 2e       	mov	r0, r23
     a5a:	00 0c       	add	r0, r0
     a5c:	88 0b       	sbc	r24, r24
     a5e:	99 0b       	sbc	r25, r25
     a60:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     a64:	4b 01       	movw	r8, r22
     a66:	5c 01       	movw	r10, r24
     a68:	f7 01       	movw	r30, r14
     a6a:	e8 5e       	subi	r30, 0xE8	; 232
     a6c:	fd 4f       	sbci	r31, 0xFD	; 253
     a6e:	60 81       	ld	r22, Z
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     a7a:	6b 01       	movw	r12, r22
     a7c:	7c 01       	movw	r14, r24
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	4f e7       	ldi	r20, 0x7F	; 127
     a84:	53 e4       	ldi	r21, 0x43	; 67
     a86:	c5 01       	movw	r24, r10
     a88:	b4 01       	movw	r22, r8
     a8a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c7 01       	movw	r24, r14
     a94:	b6 01       	movw	r22, r12
     a96:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     a9a:	6b 01       	movw	r12, r22
     a9c:	7c 01       	movw	r14, r24
     a9e:	a5 01       	movw	r20, r10
     aa0:	94 01       	movw	r18, r8
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	8f e7       	ldi	r24, 0x7F	; 127
     aa8:	93 e4       	ldi	r25, 0x43	; 67
     aaa:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__subsf3>
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	4f e7       	ldi	r20, 0x7F	; 127
     ab4:	53 e4       	ldi	r21, 0x43	; 67
     ab6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	53 e4       	ldi	r21, 0x43	; 67
     ac2:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	c7 01       	movw	r24, r14
     acc:	b6 01       	movw	r22, r12
     ace:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     ad2:	6b 01       	movw	r12, r22
     ad4:	7c 01       	movw	r14, r24
     ad6:	be 01       	movw	r22, r28
     ad8:	dd 0f       	add	r29, r29
     ada:	88 0b       	sbc	r24, r24
     adc:	99 0b       	sbc	r25, r25
     ade:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     ae2:	9b 01       	movw	r18, r22
     ae4:	ac 01       	movw	r20, r24
     ae6:	c7 01       	movw	r24, r14
     ae8:	b6 01       	movw	r22, r12
     aea:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     aee:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fixsfsi>
     af2:	9b 01       	movw	r18, r22
			break;
     af4:	9e c0       	rjmp	.+316    	; 0xc32 <__stack+0x333>
			
		case REVERSE_SAWTOOTH:
			output = (amplitude / 255.0) * sawToothLookup[255 - index] + ((255.0 - amplitude) / 255.0) * 128.0 + scaledOffset;
     af6:	07 2e       	mov	r0, r23
     af8:	00 0c       	add	r0, r0
     afa:	88 0b       	sbc	r24, r24
     afc:	99 0b       	sbc	r25, r25
     afe:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     b02:	4b 01       	movw	r8, r22
     b04:	5c 01       	movw	r10, r24
     b06:	e7 e1       	ldi	r30, 0x17	; 23
     b08:	f3 e0       	ldi	r31, 0x03	; 3
     b0a:	ee 19       	sub	r30, r14
     b0c:	ff 09       	sbc	r31, r15
     b0e:	60 81       	ld	r22, Z
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     b1a:	6b 01       	movw	r12, r22
     b1c:	7c 01       	movw	r14, r24
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	4f e7       	ldi	r20, 0x7F	; 127
     b24:	53 e4       	ldi	r21, 0x43	; 67
     b26:	c5 01       	movw	r24, r10
     b28:	b4 01       	movw	r22, r8
     b2a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	c7 01       	movw	r24, r14
     b34:	b6 01       	movw	r22, r12
     b36:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     b3a:	6b 01       	movw	r12, r22
     b3c:	7c 01       	movw	r14, r24
     b3e:	a5 01       	movw	r20, r10
     b40:	94 01       	movw	r18, r8
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	8f e7       	ldi	r24, 0x7F	; 127
     b48:	93 e4       	ldi	r25, 0x43	; 67
     b4a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__subsf3>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	4f e7       	ldi	r20, 0x7F	; 127
     b54:	53 e4       	ldi	r21, 0x43	; 67
     b56:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	53 e4       	ldi	r21, 0x43	; 67
     b62:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	c7 01       	movw	r24, r14
     b6c:	b6 01       	movw	r22, r12
     b6e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     b72:	6b 01       	movw	r12, r22
     b74:	7c 01       	movw	r14, r24
     b76:	be 01       	movw	r22, r28
     b78:	dd 0f       	add	r29, r29
     b7a:	88 0b       	sbc	r24, r24
     b7c:	99 0b       	sbc	r25, r25
     b7e:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     b82:	9b 01       	movw	r18, r22
     b84:	ac 01       	movw	r20, r24
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     b8e:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fixsfsi>
     b92:	9b 01       	movw	r18, r22
			break;
     b94:	4e c0       	rjmp	.+156    	; 0xc32 <__stack+0x333>
			
		case SQUARE:
			output = (amplitude / 255.0) * squareLookup[index] + ((255.0 - amplitude) / 255.0) * 128.0 + scaledOffset;
     b96:	07 2e       	mov	r0, r23
     b98:	00 0c       	add	r0, r0
     b9a:	88 0b       	sbc	r24, r24
     b9c:	99 0b       	sbc	r25, r25
     b9e:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     ba2:	4b 01       	movw	r8, r22
     ba4:	5c 01       	movw	r10, r24
     ba6:	f7 01       	movw	r30, r14
     ba8:	e8 5e       	subi	r30, 0xE8	; 232
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	60 81       	ld	r22, Z
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     bb8:	6b 01       	movw	r12, r22
     bba:	7c 01       	movw	r14, r24
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	4f e7       	ldi	r20, 0x7F	; 127
     bc2:	53 e4       	ldi	r21, 0x43	; 67
     bc4:	c5 01       	movw	r24, r10
     bc6:	b4 01       	movw	r22, r8
     bc8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	c7 01       	movw	r24, r14
     bd2:	b6 01       	movw	r22, r12
     bd4:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     bd8:	6b 01       	movw	r12, r22
     bda:	7c 01       	movw	r14, r24
     bdc:	a5 01       	movw	r20, r10
     bde:	94 01       	movw	r18, r8
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	8f e7       	ldi	r24, 0x7F	; 127
     be6:	93 e4       	ldi	r25, 0x43	; 67
     be8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__subsf3>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	53 e4       	ldi	r21, 0x43	; 67
     bf4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	53 e4       	ldi	r21, 0x43	; 67
     c00:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	c7 01       	movw	r24, r14
     c0a:	b6 01       	movw	r22, r12
     c0c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     c10:	4b 01       	movw	r8, r22
     c12:	5c 01       	movw	r10, r24
     c14:	be 01       	movw	r22, r28
     c16:	dd 0f       	add	r29, r29
     c18:	88 0b       	sbc	r24, r24
     c1a:	99 0b       	sbc	r25, r25
     c1c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     c20:	9b 01       	movw	r18, r22
     c22:	ac 01       	movw	r20, r24
     c24:	c5 01       	movw	r24, r10
     c26:	b4 01       	movw	r22, r8
     c28:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     c2c:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fixsfsi>
     c30:	9b 01       	movw	r18, r22
			break;
	}
	return output;
}
     c32:	c9 01       	movw	r24, r18
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	08 95       	ret

00000c4e <update_lookup_table>:
/**
  * @brief  Updates the output lookup tables
  * @param  Desired amplitude, offset, frequency, which wave, and type of wave
  * @retval None
  */
void update_lookup_table(int amplitude, int offset, int frequency, int wave, int type) {
     c4e:	6f 92       	push	r6
     c50:	7f 92       	push	r7
     c52:	8f 92       	push	r8
     c54:	9f 92       	push	r9
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	3c 01       	movw	r6, r24
     c6c:	7b 01       	movw	r14, r22
     c6e:	6a 01       	movw	r12, r20
     c70:	58 01       	movw	r10, r16
	int i;
	int prescalar;
	
	if (wave == WAVE_1) {
     c72:	21 30       	cpi	r18, 0x01	; 1
     c74:	31 05       	cpc	r19, r1
     c76:	c1 f4       	brne	.+48     	; 0xca8 <update_lookup_table+0x5a>
     c78:	0f 2e       	mov	r0, r31
     c7a:	f1 e7       	ldi	r31, 0x71	; 113
     c7c:	8f 2e       	mov	r8, r31
     c7e:	f7 e0       	ldi	r31, 0x07	; 7
     c80:	9f 2e       	mov	r9, r31
     c82:	f0 2d       	mov	r31, r0
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i < LUT_SIZE; i++) {
			outputWave1[i] = generate_wave(i, amplitude, offset, frequency, type);
     c88:	85 01       	movw	r16, r10
     c8a:	96 01       	movw	r18, r12
     c8c:	a7 01       	movw	r20, r14
     c8e:	b3 01       	movw	r22, r6
     c90:	ce 01       	movw	r24, r28
     c92:	0e 94 68 04 	call	0x8d0	; 0x8d0 <generate_wave>
     c96:	f4 01       	movw	r30, r8
     c98:	81 93       	st	Z+, r24
     c9a:	4f 01       	movw	r8, r30
void update_lookup_table(int amplitude, int offset, int frequency, int wave, int type) {
	int i;
	int prescalar;
	
	if (wave == WAVE_1) {
		for (i = 0; i < LUT_SIZE; i++) {
     c9c:	21 96       	adiw	r28, 0x01	; 1
     c9e:	c1 15       	cp	r28, r1
     ca0:	f1 e0       	ldi	r31, 0x01	; 1
     ca2:	df 07       	cpc	r29, r31
     ca4:	89 f7       	brne	.-30     	; 0xc88 <update_lookup_table+0x3a>
     ca6:	1a c0       	rjmp	.+52     	; 0xcdc <update_lookup_table+0x8e>
			outputWave1[i] = generate_wave(i, amplitude, offset, frequency, type);
		}
		
	} else if (wave == WAVE_2) {
     ca8:	22 30       	cpi	r18, 0x02	; 2
     caa:	31 05       	cpc	r19, r1
     cac:	b9 f4       	brne	.+46     	; 0xcdc <update_lookup_table+0x8e>
     cae:	0f 2e       	mov	r0, r31
     cb0:	f1 e7       	ldi	r31, 0x71	; 113
     cb2:	8f 2e       	mov	r8, r31
     cb4:	f6 e0       	ldi	r31, 0x06	; 6
     cb6:	9f 2e       	mov	r9, r31
     cb8:	f0 2d       	mov	r31, r0
     cba:	c0 e0       	ldi	r28, 0x00	; 0
     cbc:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i < LUT_SIZE; i++) {
			outputWave2[i] = generate_wave(i, amplitude, offset, frequency, type);
     cbe:	85 01       	movw	r16, r10
     cc0:	96 01       	movw	r18, r12
     cc2:	a7 01       	movw	r20, r14
     cc4:	b3 01       	movw	r22, r6
     cc6:	ce 01       	movw	r24, r28
     cc8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <generate_wave>
     ccc:	f4 01       	movw	r30, r8
     cce:	81 93       	st	Z+, r24
     cd0:	4f 01       	movw	r8, r30
		for (i = 0; i < LUT_SIZE; i++) {
			outputWave1[i] = generate_wave(i, amplitude, offset, frequency, type);
		}
		
	} else if (wave == WAVE_2) {
		for (i = 0; i < LUT_SIZE; i++) {
     cd2:	21 96       	adiw	r28, 0x01	; 1
     cd4:	c1 15       	cp	r28, r1
     cd6:	f1 e0       	ldi	r31, 0x01	; 1
     cd8:	df 07       	cpc	r29, r31
     cda:	89 f7       	brne	.-30     	; 0xcbe <update_lookup_table+0x70>
			outputWave2[i] = generate_wave(i, amplitude, offset, frequency, type);
		}
	}
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	9f 90       	pop	r9
     cf2:	8f 90       	pop	r8
     cf4:	7f 90       	pop	r7
     cf6:	6f 90       	pop	r6
     cf8:	08 95       	ret

00000cfa <init_phase_accumulator>:
  * @brief  Calculates the value of the phase. Should only be called once, not continually due to the function taking a long time.
  * @param  Desired frequency, which wave
  * @retval None
  */
void init_phase_accumulator(int frequency, int wave) {
	if (wave == WAVE_1) {
     cfa:	61 30       	cpi	r22, 0x01	; 1
     cfc:	71 05       	cpc	r23, r1
     cfe:	89 f5       	brne	.+98     	; 0xd62 <init_phase_accumulator+0x68>
		accumulator1 = 0;
     d00:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <accumulator1>
     d04:	10 92 76 08 	sts	0x0876, r1	; 0x800876 <accumulator1+0x1>
     d08:	10 92 77 08 	sts	0x0877, r1	; 0x800877 <accumulator1+0x2>
     d0c:	10 92 78 08 	sts	0x0878, r1	; 0x800878 <accumulator1+0x3>
		phase1 = (uint32_t) ((frequency * 256. * 16777216.) / SAMPLE_RATE + 0.5);
     d10:	bc 01       	movw	r22, r24
     d12:	99 0f       	add	r25, r25
     d14:	88 0b       	sbc	r24, r24
     d16:	99 0b       	sbc	r25, r25
     d18:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e8       	ldi	r20, 0x80	; 128
     d22:	53 e4       	ldi	r21, 0x43	; 67
     d24:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e8       	ldi	r20, 0x80	; 128
     d2e:	5b e4       	ldi	r21, 0x4B	; 75
     d30:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e5       	ldi	r19, 0x50	; 80
     d38:	43 ec       	ldi	r20, 0xC3	; 195
     d3a:	57 e4       	ldi	r21, 0x47	; 71
     d3c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	5f e3       	ldi	r21, 0x3F	; 63
     d48:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     d4c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixunssfsi>
     d50:	60 93 71 08 	sts	0x0871, r22	; 0x800871 <phase1>
     d54:	70 93 72 08 	sts	0x0872, r23	; 0x800872 <phase1+0x1>
     d58:	80 93 73 08 	sts	0x0873, r24	; 0x800873 <phase1+0x2>
     d5c:	90 93 74 08 	sts	0x0874, r25	; 0x800874 <phase1+0x3>
     d60:	08 95       	ret
	} else {
		accumulator2 = 0;
     d62:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <accumulator2>
     d66:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <accumulator2+0x1>
     d6a:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <accumulator2+0x2>
     d6e:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <accumulator2+0x3>
		phase2 = (uint32_t) ((frequency * 256. * 16777216.) / SAMPLE_RATE + 0.5);
     d72:	bc 01       	movw	r22, r24
     d74:	99 0f       	add	r25, r25
     d76:	88 0b       	sbc	r24, r24
     d78:	99 0b       	sbc	r25, r25
     d7a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__floatsisf>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	53 e4       	ldi	r21, 0x43	; 67
     d86:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e8       	ldi	r20, 0x80	; 128
     d90:	5b e4       	ldi	r21, 0x4B	; 75
     d92:	0e 94 85 08 	call	0x110a	; 0x110a <__mulsf3>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e5       	ldi	r19, 0x50	; 80
     d9a:	43 ec       	ldi	r20, 0xC3	; 195
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__divsf3>
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	5f e3       	ldi	r21, 0x3F	; 63
     daa:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__addsf3>
     dae:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixunssfsi>
     db2:	60 93 69 06 	sts	0x0669, r22	; 0x800669 <phase2>
     db6:	70 93 6a 06 	sts	0x066A, r23	; 0x80066a <phase2+0x1>
     dba:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <phase2+0x2>
     dbe:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <phase2+0x3>
     dc2:	08 95       	ret

00000dc4 <__subsf3>:
     dc4:	50 58       	subi	r21, 0x80	; 128

00000dc6 <__addsf3>:
     dc6:	bb 27       	eor	r27, r27
     dc8:	aa 27       	eor	r26, r26
     dca:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__addsf3x>
     dce:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_round>
     dd2:	0e 94 3d 08 	call	0x107a	; 0x107a <__fp_pscA>
     dd6:	38 f0       	brcs	.+14     	; 0xde6 <__addsf3+0x20>
     dd8:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_pscB>
     ddc:	20 f0       	brcs	.+8      	; 0xde6 <__addsf3+0x20>
     dde:	39 f4       	brne	.+14     	; 0xdee <__addsf3+0x28>
     de0:	9f 3f       	cpi	r25, 0xFF	; 255
     de2:	19 f4       	brne	.+6      	; 0xdea <__addsf3+0x24>
     de4:	26 f4       	brtc	.+8      	; 0xdee <__addsf3+0x28>
     de6:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__fp_nan>
     dea:	0e f4       	brtc	.+2      	; 0xdee <__addsf3+0x28>
     dec:	e0 95       	com	r30
     dee:	e7 fb       	bst	r30, 7
     df0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_inf>

00000df4 <__addsf3x>:
     df4:	e9 2f       	mov	r30, r25
     df6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_split3>
     dfa:	58 f3       	brcs	.-42     	; 0xdd2 <__addsf3+0xc>
     dfc:	ba 17       	cp	r27, r26
     dfe:	62 07       	cpc	r22, r18
     e00:	73 07       	cpc	r23, r19
     e02:	84 07       	cpc	r24, r20
     e04:	95 07       	cpc	r25, r21
     e06:	20 f0       	brcs	.+8      	; 0xe10 <__addsf3x+0x1c>
     e08:	79 f4       	brne	.+30     	; 0xe28 <__addsf3x+0x34>
     e0a:	a6 f5       	brtc	.+104    	; 0xe74 <__addsf3x+0x80>
     e0c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_zero>
     e10:	0e f4       	brtc	.+2      	; 0xe14 <__addsf3x+0x20>
     e12:	e0 95       	com	r30
     e14:	0b 2e       	mov	r0, r27
     e16:	ba 2f       	mov	r27, r26
     e18:	a0 2d       	mov	r26, r0
     e1a:	0b 01       	movw	r0, r22
     e1c:	b9 01       	movw	r22, r18
     e1e:	90 01       	movw	r18, r0
     e20:	0c 01       	movw	r0, r24
     e22:	ca 01       	movw	r24, r20
     e24:	a0 01       	movw	r20, r0
     e26:	11 24       	eor	r1, r1
     e28:	ff 27       	eor	r31, r31
     e2a:	59 1b       	sub	r21, r25
     e2c:	99 f0       	breq	.+38     	; 0xe54 <__addsf3x+0x60>
     e2e:	59 3f       	cpi	r21, 0xF9	; 249
     e30:	50 f4       	brcc	.+20     	; 0xe46 <__addsf3x+0x52>
     e32:	50 3e       	cpi	r21, 0xE0	; 224
     e34:	68 f1       	brcs	.+90     	; 0xe90 <__addsf3x+0x9c>
     e36:	1a 16       	cp	r1, r26
     e38:	f0 40       	sbci	r31, 0x00	; 0
     e3a:	a2 2f       	mov	r26, r18
     e3c:	23 2f       	mov	r18, r19
     e3e:	34 2f       	mov	r19, r20
     e40:	44 27       	eor	r20, r20
     e42:	58 5f       	subi	r21, 0xF8	; 248
     e44:	f3 cf       	rjmp	.-26     	; 0xe2c <__addsf3x+0x38>
     e46:	46 95       	lsr	r20
     e48:	37 95       	ror	r19
     e4a:	27 95       	ror	r18
     e4c:	a7 95       	ror	r26
     e4e:	f0 40       	sbci	r31, 0x00	; 0
     e50:	53 95       	inc	r21
     e52:	c9 f7       	brne	.-14     	; 0xe46 <__addsf3x+0x52>
     e54:	7e f4       	brtc	.+30     	; 0xe74 <__addsf3x+0x80>
     e56:	1f 16       	cp	r1, r31
     e58:	ba 0b       	sbc	r27, r26
     e5a:	62 0b       	sbc	r22, r18
     e5c:	73 0b       	sbc	r23, r19
     e5e:	84 0b       	sbc	r24, r20
     e60:	ba f0       	brmi	.+46     	; 0xe90 <__addsf3x+0x9c>
     e62:	91 50       	subi	r25, 0x01	; 1
     e64:	a1 f0       	breq	.+40     	; 0xe8e <__addsf3x+0x9a>
     e66:	ff 0f       	add	r31, r31
     e68:	bb 1f       	adc	r27, r27
     e6a:	66 1f       	adc	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	c2 f7       	brpl	.-16     	; 0xe62 <__addsf3x+0x6e>
     e72:	0e c0       	rjmp	.+28     	; 0xe90 <__addsf3x+0x9c>
     e74:	ba 0f       	add	r27, r26
     e76:	62 1f       	adc	r22, r18
     e78:	73 1f       	adc	r23, r19
     e7a:	84 1f       	adc	r24, r20
     e7c:	48 f4       	brcc	.+18     	; 0xe90 <__addsf3x+0x9c>
     e7e:	87 95       	ror	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b7 95       	ror	r27
     e86:	f7 95       	ror	r31
     e88:	9e 3f       	cpi	r25, 0xFE	; 254
     e8a:	08 f0       	brcs	.+2      	; 0xe8e <__addsf3x+0x9a>
     e8c:	b0 cf       	rjmp	.-160    	; 0xdee <__addsf3+0x28>
     e8e:	93 95       	inc	r25
     e90:	88 0f       	add	r24, r24
     e92:	08 f0       	brcs	.+2      	; 0xe96 <__addsf3x+0xa2>
     e94:	99 27       	eor	r25, r25
     e96:	ee 0f       	add	r30, r30
     e98:	97 95       	ror	r25
     e9a:	87 95       	ror	r24
     e9c:	08 95       	ret

00000e9e <__divsf3>:
     e9e:	0e 94 63 07 	call	0xec6	; 0xec6 <__divsf3x>
     ea2:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_round>
     ea6:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_pscB>
     eaa:	58 f0       	brcs	.+22     	; 0xec2 <__divsf3+0x24>
     eac:	0e 94 3d 08 	call	0x107a	; 0x107a <__fp_pscA>
     eb0:	40 f0       	brcs	.+16     	; 0xec2 <__divsf3+0x24>
     eb2:	29 f4       	brne	.+10     	; 0xebe <__divsf3+0x20>
     eb4:	5f 3f       	cpi	r21, 0xFF	; 255
     eb6:	29 f0       	breq	.+10     	; 0xec2 <__divsf3+0x24>
     eb8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_inf>
     ebc:	51 11       	cpse	r21, r1
     ebe:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__fp_szero>
     ec2:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__fp_nan>

00000ec6 <__divsf3x>:
     ec6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_split3>
     eca:	68 f3       	brcs	.-38     	; 0xea6 <__divsf3+0x8>

00000ecc <__divsf3_pse>:
     ecc:	99 23       	and	r25, r25
     ece:	b1 f3       	breq	.-20     	; 0xebc <__divsf3+0x1e>
     ed0:	55 23       	and	r21, r21
     ed2:	91 f3       	breq	.-28     	; 0xeb8 <__divsf3+0x1a>
     ed4:	95 1b       	sub	r25, r21
     ed6:	55 0b       	sbc	r21, r21
     ed8:	bb 27       	eor	r27, r27
     eda:	aa 27       	eor	r26, r26
     edc:	62 17       	cp	r22, r18
     ede:	73 07       	cpc	r23, r19
     ee0:	84 07       	cpc	r24, r20
     ee2:	38 f0       	brcs	.+14     	; 0xef2 <__divsf3_pse+0x26>
     ee4:	9f 5f       	subi	r25, 0xFF	; 255
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	22 0f       	add	r18, r18
     eea:	33 1f       	adc	r19, r19
     eec:	44 1f       	adc	r20, r20
     eee:	aa 1f       	adc	r26, r26
     ef0:	a9 f3       	breq	.-22     	; 0xedc <__divsf3_pse+0x10>
     ef2:	35 d0       	rcall	.+106    	; 0xf5e <__divsf3_pse+0x92>
     ef4:	0e 2e       	mov	r0, r30
     ef6:	3a f0       	brmi	.+14     	; 0xf06 <__divsf3_pse+0x3a>
     ef8:	e0 e8       	ldi	r30, 0x80	; 128
     efa:	32 d0       	rcall	.+100    	; 0xf60 <__divsf3_pse+0x94>
     efc:	91 50       	subi	r25, 0x01	; 1
     efe:	50 40       	sbci	r21, 0x00	; 0
     f00:	e6 95       	lsr	r30
     f02:	00 1c       	adc	r0, r0
     f04:	ca f7       	brpl	.-14     	; 0xef8 <__divsf3_pse+0x2c>
     f06:	2b d0       	rcall	.+86     	; 0xf5e <__divsf3_pse+0x92>
     f08:	fe 2f       	mov	r31, r30
     f0a:	29 d0       	rcall	.+82     	; 0xf5e <__divsf3_pse+0x92>
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	88 1f       	adc	r24, r24
     f12:	bb 1f       	adc	r27, r27
     f14:	26 17       	cp	r18, r22
     f16:	37 07       	cpc	r19, r23
     f18:	48 07       	cpc	r20, r24
     f1a:	ab 07       	cpc	r26, r27
     f1c:	b0 e8       	ldi	r27, 0x80	; 128
     f1e:	09 f0       	breq	.+2      	; 0xf22 <__divsf3_pse+0x56>
     f20:	bb 0b       	sbc	r27, r27
     f22:	80 2d       	mov	r24, r0
     f24:	bf 01       	movw	r22, r30
     f26:	ff 27       	eor	r31, r31
     f28:	93 58       	subi	r25, 0x83	; 131
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	3a f0       	brmi	.+14     	; 0xf3c <__divsf3_pse+0x70>
     f2e:	9e 3f       	cpi	r25, 0xFE	; 254
     f30:	51 05       	cpc	r21, r1
     f32:	78 f0       	brcs	.+30     	; 0xf52 <__divsf3_pse+0x86>
     f34:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_inf>
     f38:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__fp_szero>
     f3c:	5f 3f       	cpi	r21, 0xFF	; 255
     f3e:	e4 f3       	brlt	.-8      	; 0xf38 <__divsf3_pse+0x6c>
     f40:	98 3e       	cpi	r25, 0xE8	; 232
     f42:	d4 f3       	brlt	.-12     	; 0xf38 <__divsf3_pse+0x6c>
     f44:	86 95       	lsr	r24
     f46:	77 95       	ror	r23
     f48:	67 95       	ror	r22
     f4a:	b7 95       	ror	r27
     f4c:	f7 95       	ror	r31
     f4e:	9f 5f       	subi	r25, 0xFF	; 255
     f50:	c9 f7       	brne	.-14     	; 0xf44 <__divsf3_pse+0x78>
     f52:	88 0f       	add	r24, r24
     f54:	91 1d       	adc	r25, r1
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	97 f9       	bld	r25, 7
     f5c:	08 95       	ret
     f5e:	e1 e0       	ldi	r30, 0x01	; 1
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	bb 1f       	adc	r27, r27
     f68:	62 17       	cp	r22, r18
     f6a:	73 07       	cpc	r23, r19
     f6c:	84 07       	cpc	r24, r20
     f6e:	ba 07       	cpc	r27, r26
     f70:	20 f0       	brcs	.+8      	; 0xf7a <__divsf3_pse+0xae>
     f72:	62 1b       	sub	r22, r18
     f74:	73 0b       	sbc	r23, r19
     f76:	84 0b       	sbc	r24, r20
     f78:	ba 0b       	sbc	r27, r26
     f7a:	ee 1f       	adc	r30, r30
     f7c:	88 f7       	brcc	.-30     	; 0xf60 <__divsf3_pse+0x94>
     f7e:	e0 95       	com	r30
     f80:	08 95       	ret

00000f82 <__fixsfsi>:
     f82:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixunssfsi>
     f86:	68 94       	set
     f88:	b1 11       	cpse	r27, r1
     f8a:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__fp_szero>
     f8e:	08 95       	ret

00000f90 <__fixunssfsi>:
     f90:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_splitA>
     f94:	88 f0       	brcs	.+34     	; 0xfb8 <__fixunssfsi+0x28>
     f96:	9f 57       	subi	r25, 0x7F	; 127
     f98:	98 f0       	brcs	.+38     	; 0xfc0 <__fixunssfsi+0x30>
     f9a:	b9 2f       	mov	r27, r25
     f9c:	99 27       	eor	r25, r25
     f9e:	b7 51       	subi	r27, 0x17	; 23
     fa0:	b0 f0       	brcs	.+44     	; 0xfce <__fixunssfsi+0x3e>
     fa2:	e1 f0       	breq	.+56     	; 0xfdc <__fixunssfsi+0x4c>
     fa4:	66 0f       	add	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	88 1f       	adc	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	1a f0       	brmi	.+6      	; 0xfb4 <__fixunssfsi+0x24>
     fae:	ba 95       	dec	r27
     fb0:	c9 f7       	brne	.-14     	; 0xfa4 <__fixunssfsi+0x14>
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <__fixunssfsi+0x4c>
     fb4:	b1 30       	cpi	r27, 0x01	; 1
     fb6:	91 f0       	breq	.+36     	; 0xfdc <__fixunssfsi+0x4c>
     fb8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fp_zero>
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	08 95       	ret
     fc0:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_zero>
     fc4:	67 2f       	mov	r22, r23
     fc6:	78 2f       	mov	r23, r24
     fc8:	88 27       	eor	r24, r24
     fca:	b8 5f       	subi	r27, 0xF8	; 248
     fcc:	39 f0       	breq	.+14     	; 0xfdc <__fixunssfsi+0x4c>
     fce:	b9 3f       	cpi	r27, 0xF9	; 249
     fd0:	cc f3       	brlt	.-14     	; 0xfc4 <__fixunssfsi+0x34>
     fd2:	86 95       	lsr	r24
     fd4:	77 95       	ror	r23
     fd6:	67 95       	ror	r22
     fd8:	b3 95       	inc	r27
     fda:	d9 f7       	brne	.-10     	; 0xfd2 <__fixunssfsi+0x42>
     fdc:	3e f4       	brtc	.+14     	; 0xfec <__fixunssfsi+0x5c>
     fde:	90 95       	com	r25
     fe0:	80 95       	com	r24
     fe2:	70 95       	com	r23
     fe4:	61 95       	neg	r22
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8f 4f       	sbci	r24, 0xFF	; 255
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	08 95       	ret

00000fee <__floatunsisf>:
     fee:	e8 94       	clt
     ff0:	09 c0       	rjmp	.+18     	; 0x1004 <__floatsisf+0x12>

00000ff2 <__floatsisf>:
     ff2:	97 fb       	bst	r25, 7
     ff4:	3e f4       	brtc	.+14     	; 0x1004 <__floatsisf+0x12>
     ff6:	90 95       	com	r25
     ff8:	80 95       	com	r24
     ffa:	70 95       	com	r23
     ffc:	61 95       	neg	r22
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	8f 4f       	sbci	r24, 0xFF	; 255
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	99 23       	and	r25, r25
    1006:	a9 f0       	breq	.+42     	; 0x1032 <__floatsisf+0x40>
    1008:	f9 2f       	mov	r31, r25
    100a:	96 e9       	ldi	r25, 0x96	; 150
    100c:	bb 27       	eor	r27, r27
    100e:	93 95       	inc	r25
    1010:	f6 95       	lsr	r31
    1012:	87 95       	ror	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b7 95       	ror	r27
    101a:	f1 11       	cpse	r31, r1
    101c:	f8 cf       	rjmp	.-16     	; 0x100e <__floatsisf+0x1c>
    101e:	fa f4       	brpl	.+62     	; 0x105e <__floatsisf+0x6c>
    1020:	bb 0f       	add	r27, r27
    1022:	11 f4       	brne	.+4      	; 0x1028 <__floatsisf+0x36>
    1024:	60 ff       	sbrs	r22, 0
    1026:	1b c0       	rjmp	.+54     	; 0x105e <__floatsisf+0x6c>
    1028:	6f 5f       	subi	r22, 0xFF	; 255
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	16 c0       	rjmp	.+44     	; 0x105e <__floatsisf+0x6c>
    1032:	88 23       	and	r24, r24
    1034:	11 f0       	breq	.+4      	; 0x103a <__floatsisf+0x48>
    1036:	96 e9       	ldi	r25, 0x96	; 150
    1038:	11 c0       	rjmp	.+34     	; 0x105c <__floatsisf+0x6a>
    103a:	77 23       	and	r23, r23
    103c:	21 f0       	breq	.+8      	; 0x1046 <__floatsisf+0x54>
    103e:	9e e8       	ldi	r25, 0x8E	; 142
    1040:	87 2f       	mov	r24, r23
    1042:	76 2f       	mov	r23, r22
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__floatsisf+0x5e>
    1046:	66 23       	and	r22, r22
    1048:	71 f0       	breq	.+28     	; 0x1066 <__floatsisf+0x74>
    104a:	96 e8       	ldi	r25, 0x86	; 134
    104c:	86 2f       	mov	r24, r22
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	2a f0       	brmi	.+10     	; 0x105e <__floatsisf+0x6c>
    1054:	9a 95       	dec	r25
    1056:	66 0f       	add	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	da f7       	brpl	.-10     	; 0x1054 <__floatsisf+0x62>
    105e:	88 0f       	add	r24, r24
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
    1064:	97 f9       	bld	r25, 7
    1066:	08 95       	ret

00001068 <__fp_inf>:
    1068:	97 f9       	bld	r25, 7
    106a:	9f 67       	ori	r25, 0x7F	; 127
    106c:	80 e8       	ldi	r24, 0x80	; 128
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	08 95       	ret

00001074 <__fp_nan>:
    1074:	9f ef       	ldi	r25, 0xFF	; 255
    1076:	80 ec       	ldi	r24, 0xC0	; 192
    1078:	08 95       	ret

0000107a <__fp_pscA>:
    107a:	00 24       	eor	r0, r0
    107c:	0a 94       	dec	r0
    107e:	16 16       	cp	r1, r22
    1080:	17 06       	cpc	r1, r23
    1082:	18 06       	cpc	r1, r24
    1084:	09 06       	cpc	r0, r25
    1086:	08 95       	ret

00001088 <__fp_pscB>:
    1088:	00 24       	eor	r0, r0
    108a:	0a 94       	dec	r0
    108c:	12 16       	cp	r1, r18
    108e:	13 06       	cpc	r1, r19
    1090:	14 06       	cpc	r1, r20
    1092:	05 06       	cpc	r0, r21
    1094:	08 95       	ret

00001096 <__fp_round>:
    1096:	09 2e       	mov	r0, r25
    1098:	03 94       	inc	r0
    109a:	00 0c       	add	r0, r0
    109c:	11 f4       	brne	.+4      	; 0x10a2 <__fp_round+0xc>
    109e:	88 23       	and	r24, r24
    10a0:	52 f0       	brmi	.+20     	; 0x10b6 <__fp_round+0x20>
    10a2:	bb 0f       	add	r27, r27
    10a4:	40 f4       	brcc	.+16     	; 0x10b6 <__fp_round+0x20>
    10a6:	bf 2b       	or	r27, r31
    10a8:	11 f4       	brne	.+4      	; 0x10ae <__fp_round+0x18>
    10aa:	60 ff       	sbrs	r22, 0
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <__fp_round+0x20>
    10ae:	6f 5f       	subi	r22, 0xFF	; 255
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	8f 4f       	sbci	r24, 0xFF	; 255
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	08 95       	ret

000010b8 <__fp_split3>:
    10b8:	57 fd       	sbrc	r21, 7
    10ba:	90 58       	subi	r25, 0x80	; 128
    10bc:	44 0f       	add	r20, r20
    10be:	55 1f       	adc	r21, r21
    10c0:	59 f0       	breq	.+22     	; 0x10d8 <__fp_splitA+0x10>
    10c2:	5f 3f       	cpi	r21, 0xFF	; 255
    10c4:	71 f0       	breq	.+28     	; 0x10e2 <__fp_splitA+0x1a>
    10c6:	47 95       	ror	r20

000010c8 <__fp_splitA>:
    10c8:	88 0f       	add	r24, r24
    10ca:	97 fb       	bst	r25, 7
    10cc:	99 1f       	adc	r25, r25
    10ce:	61 f0       	breq	.+24     	; 0x10e8 <__fp_splitA+0x20>
    10d0:	9f 3f       	cpi	r25, 0xFF	; 255
    10d2:	79 f0       	breq	.+30     	; 0x10f2 <__fp_splitA+0x2a>
    10d4:	87 95       	ror	r24
    10d6:	08 95       	ret
    10d8:	12 16       	cp	r1, r18
    10da:	13 06       	cpc	r1, r19
    10dc:	14 06       	cpc	r1, r20
    10de:	55 1f       	adc	r21, r21
    10e0:	f2 cf       	rjmp	.-28     	; 0x10c6 <__fp_split3+0xe>
    10e2:	46 95       	lsr	r20
    10e4:	f1 df       	rcall	.-30     	; 0x10c8 <__fp_splitA>
    10e6:	08 c0       	rjmp	.+16     	; 0x10f8 <__fp_splitA+0x30>
    10e8:	16 16       	cp	r1, r22
    10ea:	17 06       	cpc	r1, r23
    10ec:	18 06       	cpc	r1, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	f1 cf       	rjmp	.-30     	; 0x10d4 <__fp_splitA+0xc>
    10f2:	86 95       	lsr	r24
    10f4:	71 05       	cpc	r23, r1
    10f6:	61 05       	cpc	r22, r1
    10f8:	08 94       	sec
    10fa:	08 95       	ret

000010fc <__fp_zero>:
    10fc:	e8 94       	clt

000010fe <__fp_szero>:
    10fe:	bb 27       	eor	r27, r27
    1100:	66 27       	eor	r22, r22
    1102:	77 27       	eor	r23, r23
    1104:	cb 01       	movw	r24, r22
    1106:	97 f9       	bld	r25, 7
    1108:	08 95       	ret

0000110a <__mulsf3>:
    110a:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3x>
    110e:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_round>
    1112:	0e 94 3d 08 	call	0x107a	; 0x107a <__fp_pscA>
    1116:	38 f0       	brcs	.+14     	; 0x1126 <__mulsf3+0x1c>
    1118:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_pscB>
    111c:	20 f0       	brcs	.+8      	; 0x1126 <__mulsf3+0x1c>
    111e:	95 23       	and	r25, r21
    1120:	11 f0       	breq	.+4      	; 0x1126 <__mulsf3+0x1c>
    1122:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_inf>
    1126:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__fp_nan>
    112a:	11 24       	eor	r1, r1
    112c:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__fp_szero>

00001130 <__mulsf3x>:
    1130:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_split3>
    1134:	70 f3       	brcs	.-36     	; 0x1112 <__mulsf3+0x8>

00001136 <__mulsf3_pse>:
    1136:	95 9f       	mul	r25, r21
    1138:	c1 f3       	breq	.-16     	; 0x112a <__mulsf3+0x20>
    113a:	95 0f       	add	r25, r21
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	55 1f       	adc	r21, r21
    1140:	62 9f       	mul	r22, r18
    1142:	f0 01       	movw	r30, r0
    1144:	72 9f       	mul	r23, r18
    1146:	bb 27       	eor	r27, r27
    1148:	f0 0d       	add	r31, r0
    114a:	b1 1d       	adc	r27, r1
    114c:	63 9f       	mul	r22, r19
    114e:	aa 27       	eor	r26, r26
    1150:	f0 0d       	add	r31, r0
    1152:	b1 1d       	adc	r27, r1
    1154:	aa 1f       	adc	r26, r26
    1156:	64 9f       	mul	r22, r20
    1158:	66 27       	eor	r22, r22
    115a:	b0 0d       	add	r27, r0
    115c:	a1 1d       	adc	r26, r1
    115e:	66 1f       	adc	r22, r22
    1160:	82 9f       	mul	r24, r18
    1162:	22 27       	eor	r18, r18
    1164:	b0 0d       	add	r27, r0
    1166:	a1 1d       	adc	r26, r1
    1168:	62 1f       	adc	r22, r18
    116a:	73 9f       	mul	r23, r19
    116c:	b0 0d       	add	r27, r0
    116e:	a1 1d       	adc	r26, r1
    1170:	62 1f       	adc	r22, r18
    1172:	83 9f       	mul	r24, r19
    1174:	a0 0d       	add	r26, r0
    1176:	61 1d       	adc	r22, r1
    1178:	22 1f       	adc	r18, r18
    117a:	74 9f       	mul	r23, r20
    117c:	33 27       	eor	r19, r19
    117e:	a0 0d       	add	r26, r0
    1180:	61 1d       	adc	r22, r1
    1182:	23 1f       	adc	r18, r19
    1184:	84 9f       	mul	r24, r20
    1186:	60 0d       	add	r22, r0
    1188:	21 1d       	adc	r18, r1
    118a:	82 2f       	mov	r24, r18
    118c:	76 2f       	mov	r23, r22
    118e:	6a 2f       	mov	r22, r26
    1190:	11 24       	eor	r1, r1
    1192:	9f 57       	subi	r25, 0x7F	; 127
    1194:	50 40       	sbci	r21, 0x00	; 0
    1196:	9a f0       	brmi	.+38     	; 0x11be <__mulsf3_pse+0x88>
    1198:	f1 f0       	breq	.+60     	; 0x11d6 <__mulsf3_pse+0xa0>
    119a:	88 23       	and	r24, r24
    119c:	4a f0       	brmi	.+18     	; 0x11b0 <__mulsf3_pse+0x7a>
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	bb 1f       	adc	r27, r27
    11a4:	66 1f       	adc	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	91 50       	subi	r25, 0x01	; 1
    11ac:	50 40       	sbci	r21, 0x00	; 0
    11ae:	a9 f7       	brne	.-22     	; 0x119a <__mulsf3_pse+0x64>
    11b0:	9e 3f       	cpi	r25, 0xFE	; 254
    11b2:	51 05       	cpc	r21, r1
    11b4:	80 f0       	brcs	.+32     	; 0x11d6 <__mulsf3_pse+0xa0>
    11b6:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_inf>
    11ba:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__fp_szero>
    11be:	5f 3f       	cpi	r21, 0xFF	; 255
    11c0:	e4 f3       	brlt	.-8      	; 0x11ba <__mulsf3_pse+0x84>
    11c2:	98 3e       	cpi	r25, 0xE8	; 232
    11c4:	d4 f3       	brlt	.-12     	; 0x11ba <__mulsf3_pse+0x84>
    11c6:	86 95       	lsr	r24
    11c8:	77 95       	ror	r23
    11ca:	67 95       	ror	r22
    11cc:	b7 95       	ror	r27
    11ce:	f7 95       	ror	r31
    11d0:	e7 95       	ror	r30
    11d2:	9f 5f       	subi	r25, 0xFF	; 255
    11d4:	c1 f7       	brne	.-16     	; 0x11c6 <__mulsf3_pse+0x90>
    11d6:	fe 2b       	or	r31, r30
    11d8:	88 0f       	add	r24, r24
    11da:	91 1d       	adc	r25, r1
    11dc:	96 95       	lsr	r25
    11de:	87 95       	ror	r24
    11e0:	97 f9       	bld	r25, 7
    11e2:	08 95       	ret

000011e4 <__divmodsi4>:
    11e4:	05 2e       	mov	r0, r21
    11e6:	97 fb       	bst	r25, 7
    11e8:	1e f4       	brtc	.+6      	; 0x11f0 <__divmodsi4+0xc>
    11ea:	00 94       	com	r0
    11ec:	0e 94 09 09 	call	0x1212	; 0x1212 <__negsi2>
    11f0:	57 fd       	sbrc	r21, 7
    11f2:	07 d0       	rcall	.+14     	; 0x1202 <__divmodsi4_neg2>
    11f4:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
    11f8:	07 fc       	sbrc	r0, 7
    11fa:	03 d0       	rcall	.+6      	; 0x1202 <__divmodsi4_neg2>
    11fc:	4e f4       	brtc	.+18     	; 0x1210 <__divmodsi4_exit>
    11fe:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__negsi2>

00001202 <__divmodsi4_neg2>:
    1202:	50 95       	com	r21
    1204:	40 95       	com	r20
    1206:	30 95       	com	r19
    1208:	21 95       	neg	r18
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	4f 4f       	sbci	r20, 0xFF	; 255
    120e:	5f 4f       	sbci	r21, 0xFF	; 255

00001210 <__divmodsi4_exit>:
    1210:	08 95       	ret

00001212 <__negsi2>:
    1212:	90 95       	com	r25
    1214:	80 95       	com	r24
    1216:	70 95       	com	r23
    1218:	61 95       	neg	r22
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	8f 4f       	sbci	r24, 0xFF	; 255
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	08 95       	ret

00001222 <__udivmodsi4>:
    1222:	a1 e2       	ldi	r26, 0x21	; 33
    1224:	1a 2e       	mov	r1, r26
    1226:	aa 1b       	sub	r26, r26
    1228:	bb 1b       	sub	r27, r27
    122a:	fd 01       	movw	r30, r26
    122c:	0d c0       	rjmp	.+26     	; 0x1248 <__udivmodsi4_ep>

0000122e <__udivmodsi4_loop>:
    122e:	aa 1f       	adc	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	ee 1f       	adc	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	a2 17       	cp	r26, r18
    1238:	b3 07       	cpc	r27, r19
    123a:	e4 07       	cpc	r30, r20
    123c:	f5 07       	cpc	r31, r21
    123e:	20 f0       	brcs	.+8      	; 0x1248 <__udivmodsi4_ep>
    1240:	a2 1b       	sub	r26, r18
    1242:	b3 0b       	sbc	r27, r19
    1244:	e4 0b       	sbc	r30, r20
    1246:	f5 0b       	sbc	r31, r21

00001248 <__udivmodsi4_ep>:
    1248:	66 1f       	adc	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	1a 94       	dec	r1
    1252:	69 f7       	brne	.-38     	; 0x122e <__udivmodsi4_loop>
    1254:	60 95       	com	r22
    1256:	70 95       	com	r23
    1258:	80 95       	com	r24
    125a:	90 95       	com	r25
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	bd 01       	movw	r22, r26
    1262:	cf 01       	movw	r24, r30
    1264:	08 95       	ret

00001266 <atoi>:
    1266:	fc 01       	movw	r30, r24
    1268:	88 27       	eor	r24, r24
    126a:	99 27       	eor	r25, r25
    126c:	e8 94       	clt
    126e:	21 91       	ld	r18, Z+
    1270:	20 32       	cpi	r18, 0x20	; 32
    1272:	e9 f3       	breq	.-6      	; 0x126e <atoi+0x8>
    1274:	29 30       	cpi	r18, 0x09	; 9
    1276:	10 f0       	brcs	.+4      	; 0x127c <atoi+0x16>
    1278:	2e 30       	cpi	r18, 0x0E	; 14
    127a:	c8 f3       	brcs	.-14     	; 0x126e <atoi+0x8>
    127c:	2b 32       	cpi	r18, 0x2B	; 43
    127e:	41 f0       	breq	.+16     	; 0x1290 <atoi+0x2a>
    1280:	2d 32       	cpi	r18, 0x2D	; 45
    1282:	39 f4       	brne	.+14     	; 0x1292 <atoi+0x2c>
    1284:	68 94       	set
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <atoi+0x2a>
    1288:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__mulhi_const_10>
    128c:	82 0f       	add	r24, r18
    128e:	91 1d       	adc	r25, r1
    1290:	21 91       	ld	r18, Z+
    1292:	20 53       	subi	r18, 0x30	; 48
    1294:	2a 30       	cpi	r18, 0x0A	; 10
    1296:	c0 f3       	brcs	.-16     	; 0x1288 <atoi+0x22>
    1298:	1e f4       	brtc	.+6      	; 0x12a0 <atoi+0x3a>
    129a:	90 95       	com	r25
    129c:	81 95       	neg	r24
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	08 95       	ret

000012a2 <memset>:
    12a2:	dc 01       	movw	r26, r24
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <memset+0x6>
    12a6:	6d 93       	st	X+, r22
    12a8:	41 50       	subi	r20, 0x01	; 1
    12aa:	50 40       	sbci	r21, 0x00	; 0
    12ac:	e0 f7       	brcc	.-8      	; 0x12a6 <memset+0x4>
    12ae:	08 95       	ret

000012b0 <__mulhi_const_10>:
    12b0:	7a e0       	ldi	r23, 0x0A	; 10
    12b2:	97 9f       	mul	r25, r23
    12b4:	90 2d       	mov	r25, r0
    12b6:	87 9f       	mul	r24, r23
    12b8:	80 2d       	mov	r24, r0
    12ba:	91 0d       	add	r25, r1
    12bc:	11 24       	eor	r1, r1
    12be:	08 95       	ret

000012c0 <printf>:
    12c0:	a0 e0       	ldi	r26, 0x00	; 0
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e6 e6       	ldi	r30, 0x66	; 102
    12c6:	f9 e0       	ldi	r31, 0x09	; 9
    12c8:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__prologue_saves__+0x20>
    12cc:	ae 01       	movw	r20, r28
    12ce:	4b 5f       	subi	r20, 0xFB	; 251
    12d0:	5f 4f       	sbci	r21, 0xFF	; 255
    12d2:	fa 01       	movw	r30, r20
    12d4:	61 91       	ld	r22, Z+
    12d6:	71 91       	ld	r23, Z+
    12d8:	af 01       	movw	r20, r30
    12da:	80 91 7b 08 	lds	r24, 0x087B	; 0x80087b <__iob+0x2>
    12de:	90 91 7c 08 	lds	r25, 0x087C	; 0x80087c <__iob+0x3>
    12e2:	0e 94 98 09 	call	0x1330	; 0x1330 <vfprintf>
    12e6:	e2 e0       	ldi	r30, 0x02	; 2
    12e8:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__epilogue_restores__+0x20>

000012ec <sprintf>:
    12ec:	ae e0       	ldi	r26, 0x0E	; 14
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ec e7       	ldi	r30, 0x7C	; 124
    12f2:	f9 e0       	ldi	r31, 0x09	; 9
    12f4:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__prologue_saves__+0x1c>
    12f8:	0d 89       	ldd	r16, Y+21	; 0x15
    12fa:	1e 89       	ldd	r17, Y+22	; 0x16
    12fc:	86 e0       	ldi	r24, 0x06	; 6
    12fe:	8c 83       	std	Y+4, r24	; 0x04
    1300:	1a 83       	std	Y+2, r17	; 0x02
    1302:	09 83       	std	Y+1, r16	; 0x01
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	9f e7       	ldi	r25, 0x7F	; 127
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	8d 83       	std	Y+5, r24	; 0x05
    130c:	ae 01       	movw	r20, r28
    130e:	47 5e       	subi	r20, 0xE7	; 231
    1310:	5f 4f       	sbci	r21, 0xFF	; 255
    1312:	6f 89       	ldd	r22, Y+23	; 0x17
    1314:	78 8d       	ldd	r23, Y+24	; 0x18
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	0e 94 98 09 	call	0x1330	; 0x1330 <vfprintf>
    131e:	ef 81       	ldd	r30, Y+7	; 0x07
    1320:	f8 85       	ldd	r31, Y+8	; 0x08
    1322:	e0 0f       	add	r30, r16
    1324:	f1 1f       	adc	r31, r17
    1326:	10 82       	st	Z, r1
    1328:	2e 96       	adiw	r28, 0x0e	; 14
    132a:	e4 e0       	ldi	r30, 0x04	; 4
    132c:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__epilogue_restores__+0x1c>

00001330 <vfprintf>:
    1330:	ab e0       	ldi	r26, 0x0B	; 11
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ee e9       	ldi	r30, 0x9E	; 158
    1336:	f9 e0       	ldi	r31, 0x09	; 9
    1338:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__prologue_saves__>
    133c:	6c 01       	movw	r12, r24
    133e:	7b 01       	movw	r14, r22
    1340:	8a 01       	movw	r16, r20
    1342:	fc 01       	movw	r30, r24
    1344:	17 82       	std	Z+7, r1	; 0x07
    1346:	16 82       	std	Z+6, r1	; 0x06
    1348:	83 81       	ldd	r24, Z+3	; 0x03
    134a:	81 ff       	sbrs	r24, 1
    134c:	cc c1       	rjmp	.+920    	; 0x16e6 <vfprintf+0x3b6>
    134e:	ce 01       	movw	r24, r28
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	3c 01       	movw	r6, r24
    1354:	f6 01       	movw	r30, r12
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	f7 01       	movw	r30, r14
    135a:	93 fd       	sbrc	r25, 3
    135c:	85 91       	lpm	r24, Z+
    135e:	93 ff       	sbrs	r25, 3
    1360:	81 91       	ld	r24, Z+
    1362:	7f 01       	movw	r14, r30
    1364:	88 23       	and	r24, r24
    1366:	09 f4       	brne	.+2      	; 0x136a <vfprintf+0x3a>
    1368:	ba c1       	rjmp	.+884    	; 0x16de <vfprintf+0x3ae>
    136a:	85 32       	cpi	r24, 0x25	; 37
    136c:	39 f4       	brne	.+14     	; 0x137c <vfprintf+0x4c>
    136e:	93 fd       	sbrc	r25, 3
    1370:	85 91       	lpm	r24, Z+
    1372:	93 ff       	sbrs	r25, 3
    1374:	81 91       	ld	r24, Z+
    1376:	7f 01       	movw	r14, r30
    1378:	85 32       	cpi	r24, 0x25	; 37
    137a:	29 f4       	brne	.+10     	; 0x1386 <vfprintf+0x56>
    137c:	b6 01       	movw	r22, r12
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 8f 0b 	call	0x171e	; 0x171e <fputc>
    1384:	e7 cf       	rjmp	.-50     	; 0x1354 <vfprintf+0x24>
    1386:	91 2c       	mov	r9, r1
    1388:	21 2c       	mov	r2, r1
    138a:	31 2c       	mov	r3, r1
    138c:	ff e1       	ldi	r31, 0x1F	; 31
    138e:	f3 15       	cp	r31, r3
    1390:	d8 f0       	brcs	.+54     	; 0x13c8 <vfprintf+0x98>
    1392:	8b 32       	cpi	r24, 0x2B	; 43
    1394:	79 f0       	breq	.+30     	; 0x13b4 <vfprintf+0x84>
    1396:	38 f4       	brcc	.+14     	; 0x13a6 <vfprintf+0x76>
    1398:	80 32       	cpi	r24, 0x20	; 32
    139a:	79 f0       	breq	.+30     	; 0x13ba <vfprintf+0x8a>
    139c:	83 32       	cpi	r24, 0x23	; 35
    139e:	a1 f4       	brne	.+40     	; 0x13c8 <vfprintf+0x98>
    13a0:	23 2d       	mov	r18, r3
    13a2:	20 61       	ori	r18, 0x10	; 16
    13a4:	1d c0       	rjmp	.+58     	; 0x13e0 <vfprintf+0xb0>
    13a6:	8d 32       	cpi	r24, 0x2D	; 45
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <vfprintf+0x92>
    13aa:	80 33       	cpi	r24, 0x30	; 48
    13ac:	69 f4       	brne	.+26     	; 0x13c8 <vfprintf+0x98>
    13ae:	23 2d       	mov	r18, r3
    13b0:	21 60       	ori	r18, 0x01	; 1
    13b2:	16 c0       	rjmp	.+44     	; 0x13e0 <vfprintf+0xb0>
    13b4:	83 2d       	mov	r24, r3
    13b6:	82 60       	ori	r24, 0x02	; 2
    13b8:	38 2e       	mov	r3, r24
    13ba:	e3 2d       	mov	r30, r3
    13bc:	e4 60       	ori	r30, 0x04	; 4
    13be:	3e 2e       	mov	r3, r30
    13c0:	2a c0       	rjmp	.+84     	; 0x1416 <vfprintf+0xe6>
    13c2:	f3 2d       	mov	r31, r3
    13c4:	f8 60       	ori	r31, 0x08	; 8
    13c6:	1d c0       	rjmp	.+58     	; 0x1402 <vfprintf+0xd2>
    13c8:	37 fc       	sbrc	r3, 7
    13ca:	2d c0       	rjmp	.+90     	; 0x1426 <vfprintf+0xf6>
    13cc:	20 ed       	ldi	r18, 0xD0	; 208
    13ce:	28 0f       	add	r18, r24
    13d0:	2a 30       	cpi	r18, 0x0A	; 10
    13d2:	40 f0       	brcs	.+16     	; 0x13e4 <vfprintf+0xb4>
    13d4:	8e 32       	cpi	r24, 0x2E	; 46
    13d6:	b9 f4       	brne	.+46     	; 0x1406 <vfprintf+0xd6>
    13d8:	36 fc       	sbrc	r3, 6
    13da:	81 c1       	rjmp	.+770    	; 0x16de <vfprintf+0x3ae>
    13dc:	23 2d       	mov	r18, r3
    13de:	20 64       	ori	r18, 0x40	; 64
    13e0:	32 2e       	mov	r3, r18
    13e2:	19 c0       	rjmp	.+50     	; 0x1416 <vfprintf+0xe6>
    13e4:	36 fe       	sbrs	r3, 6
    13e6:	06 c0       	rjmp	.+12     	; 0x13f4 <vfprintf+0xc4>
    13e8:	8a e0       	ldi	r24, 0x0A	; 10
    13ea:	98 9e       	mul	r9, r24
    13ec:	20 0d       	add	r18, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	92 2e       	mov	r9, r18
    13f2:	11 c0       	rjmp	.+34     	; 0x1416 <vfprintf+0xe6>
    13f4:	ea e0       	ldi	r30, 0x0A	; 10
    13f6:	2e 9e       	mul	r2, r30
    13f8:	20 0d       	add	r18, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	22 2e       	mov	r2, r18
    13fe:	f3 2d       	mov	r31, r3
    1400:	f0 62       	ori	r31, 0x20	; 32
    1402:	3f 2e       	mov	r3, r31
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <vfprintf+0xe6>
    1406:	8c 36       	cpi	r24, 0x6C	; 108
    1408:	21 f4       	brne	.+8      	; 0x1412 <vfprintf+0xe2>
    140a:	83 2d       	mov	r24, r3
    140c:	80 68       	ori	r24, 0x80	; 128
    140e:	38 2e       	mov	r3, r24
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <vfprintf+0xe6>
    1412:	88 36       	cpi	r24, 0x68	; 104
    1414:	41 f4       	brne	.+16     	; 0x1426 <vfprintf+0xf6>
    1416:	f7 01       	movw	r30, r14
    1418:	93 fd       	sbrc	r25, 3
    141a:	85 91       	lpm	r24, Z+
    141c:	93 ff       	sbrs	r25, 3
    141e:	81 91       	ld	r24, Z+
    1420:	7f 01       	movw	r14, r30
    1422:	81 11       	cpse	r24, r1
    1424:	b3 cf       	rjmp	.-154    	; 0x138c <vfprintf+0x5c>
    1426:	98 2f       	mov	r25, r24
    1428:	9f 7d       	andi	r25, 0xDF	; 223
    142a:	95 54       	subi	r25, 0x45	; 69
    142c:	93 30       	cpi	r25, 0x03	; 3
    142e:	28 f4       	brcc	.+10     	; 0x143a <vfprintf+0x10a>
    1430:	0c 5f       	subi	r16, 0xFC	; 252
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	9f e3       	ldi	r25, 0x3F	; 63
    1436:	99 83       	std	Y+1, r25	; 0x01
    1438:	0d c0       	rjmp	.+26     	; 0x1454 <vfprintf+0x124>
    143a:	83 36       	cpi	r24, 0x63	; 99
    143c:	31 f0       	breq	.+12     	; 0x144a <vfprintf+0x11a>
    143e:	83 37       	cpi	r24, 0x73	; 115
    1440:	71 f0       	breq	.+28     	; 0x145e <vfprintf+0x12e>
    1442:	83 35       	cpi	r24, 0x53	; 83
    1444:	09 f0       	breq	.+2      	; 0x1448 <vfprintf+0x118>
    1446:	59 c0       	rjmp	.+178    	; 0x14fa <vfprintf+0x1ca>
    1448:	21 c0       	rjmp	.+66     	; 0x148c <vfprintf+0x15c>
    144a:	f8 01       	movw	r30, r16
    144c:	80 81       	ld	r24, Z
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	0e 5f       	subi	r16, 0xFE	; 254
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	88 24       	eor	r8, r8
    1456:	83 94       	inc	r8
    1458:	91 2c       	mov	r9, r1
    145a:	53 01       	movw	r10, r6
    145c:	13 c0       	rjmp	.+38     	; 0x1484 <vfprintf+0x154>
    145e:	28 01       	movw	r4, r16
    1460:	f2 e0       	ldi	r31, 0x02	; 2
    1462:	4f 0e       	add	r4, r31
    1464:	51 1c       	adc	r5, r1
    1466:	f8 01       	movw	r30, r16
    1468:	a0 80       	ld	r10, Z
    146a:	b1 80       	ldd	r11, Z+1	; 0x01
    146c:	36 fe       	sbrs	r3, 6
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <vfprintf+0x146>
    1470:	69 2d       	mov	r22, r9
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <vfprintf+0x14a>
    1476:	6f ef       	ldi	r22, 0xFF	; 255
    1478:	7f ef       	ldi	r23, 0xFF	; 255
    147a:	c5 01       	movw	r24, r10
    147c:	0e 94 84 0b 	call	0x1708	; 0x1708 <strnlen>
    1480:	4c 01       	movw	r8, r24
    1482:	82 01       	movw	r16, r4
    1484:	f3 2d       	mov	r31, r3
    1486:	ff 77       	andi	r31, 0x7F	; 127
    1488:	3f 2e       	mov	r3, r31
    148a:	16 c0       	rjmp	.+44     	; 0x14b8 <vfprintf+0x188>
    148c:	28 01       	movw	r4, r16
    148e:	22 e0       	ldi	r18, 0x02	; 2
    1490:	42 0e       	add	r4, r18
    1492:	51 1c       	adc	r5, r1
    1494:	f8 01       	movw	r30, r16
    1496:	a0 80       	ld	r10, Z
    1498:	b1 80       	ldd	r11, Z+1	; 0x01
    149a:	36 fe       	sbrs	r3, 6
    149c:	03 c0       	rjmp	.+6      	; 0x14a4 <vfprintf+0x174>
    149e:	69 2d       	mov	r22, r9
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <vfprintf+0x178>
    14a4:	6f ef       	ldi	r22, 0xFF	; 255
    14a6:	7f ef       	ldi	r23, 0xFF	; 255
    14a8:	c5 01       	movw	r24, r10
    14aa:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <strnlen_P>
    14ae:	4c 01       	movw	r8, r24
    14b0:	f3 2d       	mov	r31, r3
    14b2:	f0 68       	ori	r31, 0x80	; 128
    14b4:	3f 2e       	mov	r3, r31
    14b6:	82 01       	movw	r16, r4
    14b8:	33 fc       	sbrc	r3, 3
    14ba:	1b c0       	rjmp	.+54     	; 0x14f2 <vfprintf+0x1c2>
    14bc:	82 2d       	mov	r24, r2
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	88 16       	cp	r8, r24
    14c2:	99 06       	cpc	r9, r25
    14c4:	b0 f4       	brcc	.+44     	; 0x14f2 <vfprintf+0x1c2>
    14c6:	b6 01       	movw	r22, r12
    14c8:	80 e2       	ldi	r24, 0x20	; 32
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 8f 0b 	call	0x171e	; 0x171e <fputc>
    14d0:	2a 94       	dec	r2
    14d2:	f4 cf       	rjmp	.-24     	; 0x14bc <vfprintf+0x18c>
    14d4:	f5 01       	movw	r30, r10
    14d6:	37 fc       	sbrc	r3, 7
    14d8:	85 91       	lpm	r24, Z+
    14da:	37 fe       	sbrs	r3, 7
    14dc:	81 91       	ld	r24, Z+
    14de:	5f 01       	movw	r10, r30
    14e0:	b6 01       	movw	r22, r12
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 8f 0b 	call	0x171e	; 0x171e <fputc>
    14e8:	21 10       	cpse	r2, r1
    14ea:	2a 94       	dec	r2
    14ec:	21 e0       	ldi	r18, 0x01	; 1
    14ee:	82 1a       	sub	r8, r18
    14f0:	91 08       	sbc	r9, r1
    14f2:	81 14       	cp	r8, r1
    14f4:	91 04       	cpc	r9, r1
    14f6:	71 f7       	brne	.-36     	; 0x14d4 <vfprintf+0x1a4>
    14f8:	e8 c0       	rjmp	.+464    	; 0x16ca <vfprintf+0x39a>
    14fa:	84 36       	cpi	r24, 0x64	; 100
    14fc:	11 f0       	breq	.+4      	; 0x1502 <vfprintf+0x1d2>
    14fe:	89 36       	cpi	r24, 0x69	; 105
    1500:	41 f5       	brne	.+80     	; 0x1552 <vfprintf+0x222>
    1502:	f8 01       	movw	r30, r16
    1504:	37 fe       	sbrs	r3, 7
    1506:	07 c0       	rjmp	.+14     	; 0x1516 <vfprintf+0x1e6>
    1508:	60 81       	ld	r22, Z
    150a:	71 81       	ldd	r23, Z+1	; 0x01
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	0c 5f       	subi	r16, 0xFC	; 252
    1512:	1f 4f       	sbci	r17, 0xFF	; 255
    1514:	08 c0       	rjmp	.+16     	; 0x1526 <vfprintf+0x1f6>
    1516:	60 81       	ld	r22, Z
    1518:	71 81       	ldd	r23, Z+1	; 0x01
    151a:	07 2e       	mov	r0, r23
    151c:	00 0c       	add	r0, r0
    151e:	88 0b       	sbc	r24, r24
    1520:	99 0b       	sbc	r25, r25
    1522:	0e 5f       	subi	r16, 0xFE	; 254
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
    1526:	f3 2d       	mov	r31, r3
    1528:	ff 76       	andi	r31, 0x6F	; 111
    152a:	3f 2e       	mov	r3, r31
    152c:	97 ff       	sbrs	r25, 7
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <vfprintf+0x212>
    1530:	90 95       	com	r25
    1532:	80 95       	com	r24
    1534:	70 95       	com	r23
    1536:	61 95       	neg	r22
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	8f 4f       	sbci	r24, 0xFF	; 255
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	f0 68       	ori	r31, 0x80	; 128
    1540:	3f 2e       	mov	r3, r31
    1542:	2a e0       	ldi	r18, 0x0A	; 10
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	a3 01       	movw	r20, r6
    1548:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__ultoa_invert>
    154c:	88 2e       	mov	r8, r24
    154e:	86 18       	sub	r8, r6
    1550:	45 c0       	rjmp	.+138    	; 0x15dc <vfprintf+0x2ac>
    1552:	85 37       	cpi	r24, 0x75	; 117
    1554:	31 f4       	brne	.+12     	; 0x1562 <vfprintf+0x232>
    1556:	23 2d       	mov	r18, r3
    1558:	2f 7e       	andi	r18, 0xEF	; 239
    155a:	b2 2e       	mov	r11, r18
    155c:	2a e0       	ldi	r18, 0x0A	; 10
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	25 c0       	rjmp	.+74     	; 0x15ac <vfprintf+0x27c>
    1562:	93 2d       	mov	r25, r3
    1564:	99 7f       	andi	r25, 0xF9	; 249
    1566:	b9 2e       	mov	r11, r25
    1568:	8f 36       	cpi	r24, 0x6F	; 111
    156a:	c1 f0       	breq	.+48     	; 0x159c <vfprintf+0x26c>
    156c:	18 f4       	brcc	.+6      	; 0x1574 <vfprintf+0x244>
    156e:	88 35       	cpi	r24, 0x58	; 88
    1570:	79 f0       	breq	.+30     	; 0x1590 <vfprintf+0x260>
    1572:	b5 c0       	rjmp	.+362    	; 0x16de <vfprintf+0x3ae>
    1574:	80 37       	cpi	r24, 0x70	; 112
    1576:	19 f0       	breq	.+6      	; 0x157e <vfprintf+0x24e>
    1578:	88 37       	cpi	r24, 0x78	; 120
    157a:	21 f0       	breq	.+8      	; 0x1584 <vfprintf+0x254>
    157c:	b0 c0       	rjmp	.+352    	; 0x16de <vfprintf+0x3ae>
    157e:	e9 2f       	mov	r30, r25
    1580:	e0 61       	ori	r30, 0x10	; 16
    1582:	be 2e       	mov	r11, r30
    1584:	b4 fe       	sbrs	r11, 4
    1586:	0d c0       	rjmp	.+26     	; 0x15a2 <vfprintf+0x272>
    1588:	fb 2d       	mov	r31, r11
    158a:	f4 60       	ori	r31, 0x04	; 4
    158c:	bf 2e       	mov	r11, r31
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <vfprintf+0x272>
    1590:	34 fe       	sbrs	r3, 4
    1592:	0a c0       	rjmp	.+20     	; 0x15a8 <vfprintf+0x278>
    1594:	29 2f       	mov	r18, r25
    1596:	26 60       	ori	r18, 0x06	; 6
    1598:	b2 2e       	mov	r11, r18
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <vfprintf+0x278>
    159c:	28 e0       	ldi	r18, 0x08	; 8
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	05 c0       	rjmp	.+10     	; 0x15ac <vfprintf+0x27c>
    15a2:	20 e1       	ldi	r18, 0x10	; 16
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x27c>
    15a8:	20 e1       	ldi	r18, 0x10	; 16
    15aa:	32 e0       	ldi	r19, 0x02	; 2
    15ac:	f8 01       	movw	r30, r16
    15ae:	b7 fe       	sbrs	r11, 7
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <vfprintf+0x290>
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	0c 5f       	subi	r16, 0xFC	; 252
    15bc:	1f 4f       	sbci	r17, 0xFF	; 255
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <vfprintf+0x29c>
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 5f       	subi	r16, 0xFE	; 254
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	a3 01       	movw	r20, r6
    15ce:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__ultoa_invert>
    15d2:	88 2e       	mov	r8, r24
    15d4:	86 18       	sub	r8, r6
    15d6:	fb 2d       	mov	r31, r11
    15d8:	ff 77       	andi	r31, 0x7F	; 127
    15da:	3f 2e       	mov	r3, r31
    15dc:	36 fe       	sbrs	r3, 6
    15de:	0d c0       	rjmp	.+26     	; 0x15fa <vfprintf+0x2ca>
    15e0:	23 2d       	mov	r18, r3
    15e2:	2e 7f       	andi	r18, 0xFE	; 254
    15e4:	a2 2e       	mov	r10, r18
    15e6:	89 14       	cp	r8, r9
    15e8:	58 f4       	brcc	.+22     	; 0x1600 <vfprintf+0x2d0>
    15ea:	34 fe       	sbrs	r3, 4
    15ec:	0b c0       	rjmp	.+22     	; 0x1604 <vfprintf+0x2d4>
    15ee:	32 fc       	sbrc	r3, 2
    15f0:	09 c0       	rjmp	.+18     	; 0x1604 <vfprintf+0x2d4>
    15f2:	83 2d       	mov	r24, r3
    15f4:	8e 7e       	andi	r24, 0xEE	; 238
    15f6:	a8 2e       	mov	r10, r24
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <vfprintf+0x2d4>
    15fa:	b8 2c       	mov	r11, r8
    15fc:	a3 2c       	mov	r10, r3
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <vfprintf+0x2d6>
    1600:	b8 2c       	mov	r11, r8
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <vfprintf+0x2d6>
    1604:	b9 2c       	mov	r11, r9
    1606:	a4 fe       	sbrs	r10, 4
    1608:	0f c0       	rjmp	.+30     	; 0x1628 <vfprintf+0x2f8>
    160a:	fe 01       	movw	r30, r28
    160c:	e8 0d       	add	r30, r8
    160e:	f1 1d       	adc	r31, r1
    1610:	80 81       	ld	r24, Z
    1612:	80 33       	cpi	r24, 0x30	; 48
    1614:	21 f4       	brne	.+8      	; 0x161e <vfprintf+0x2ee>
    1616:	9a 2d       	mov	r25, r10
    1618:	99 7e       	andi	r25, 0xE9	; 233
    161a:	a9 2e       	mov	r10, r25
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <vfprintf+0x300>
    161e:	a2 fe       	sbrs	r10, 2
    1620:	06 c0       	rjmp	.+12     	; 0x162e <vfprintf+0x2fe>
    1622:	b3 94       	inc	r11
    1624:	b3 94       	inc	r11
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <vfprintf+0x300>
    1628:	8a 2d       	mov	r24, r10
    162a:	86 78       	andi	r24, 0x86	; 134
    162c:	09 f0       	breq	.+2      	; 0x1630 <vfprintf+0x300>
    162e:	b3 94       	inc	r11
    1630:	a3 fc       	sbrc	r10, 3
    1632:	11 c0       	rjmp	.+34     	; 0x1656 <vfprintf+0x326>
    1634:	a0 fe       	sbrs	r10, 0
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <vfprintf+0x314>
    1638:	b2 14       	cp	r11, r2
    163a:	88 f4       	brcc	.+34     	; 0x165e <vfprintf+0x32e>
    163c:	28 0c       	add	r2, r8
    163e:	92 2c       	mov	r9, r2
    1640:	9b 18       	sub	r9, r11
    1642:	0e c0       	rjmp	.+28     	; 0x1660 <vfprintf+0x330>
    1644:	b2 14       	cp	r11, r2
    1646:	60 f4       	brcc	.+24     	; 0x1660 <vfprintf+0x330>
    1648:	b6 01       	movw	r22, r12
    164a:	80 e2       	ldi	r24, 0x20	; 32
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 8f 0b 	call	0x171e	; 0x171e <fputc>
    1652:	b3 94       	inc	r11
    1654:	f7 cf       	rjmp	.-18     	; 0x1644 <vfprintf+0x314>
    1656:	b2 14       	cp	r11, r2
    1658:	18 f4       	brcc	.+6      	; 0x1660 <vfprintf+0x330>
    165a:	2b 18       	sub	r2, r11
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <vfprintf+0x332>
    165e:	98 2c       	mov	r9, r8
    1660:	21 2c       	mov	r2, r1
    1662:	a4 fe       	sbrs	r10, 4
    1664:	10 c0       	rjmp	.+32     	; 0x1686 <vfprintf+0x356>
    1666:	b6 01       	movw	r22, r12
    1668:	80 e3       	ldi	r24, 0x30	; 48
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 8f 0b 	call	0x171e	; 0x171e <fputc>
    1670:	a2 fe       	sbrs	r10, 2
    1672:	17 c0       	rjmp	.+46     	; 0x16a2 <vfprintf+0x372>
    1674:	a1 fc       	sbrc	r10, 1
    1676:	03 c0       	rjmp	.+6      	; 0x167e <vfprintf+0x34e>
    1678:	88 e7       	ldi	r24, 0x78	; 120
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <vfprintf+0x352>
    167e:	88 e5       	ldi	r24, 0x58	; 88
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	b6 01       	movw	r22, r12
    1684:	0c c0       	rjmp	.+24     	; 0x169e <vfprintf+0x36e>
    1686:	8a 2d       	mov	r24, r10
    1688:	86 78       	andi	r24, 0x86	; 134
    168a:	59 f0       	breq	.+22     	; 0x16a2 <vfprintf+0x372>
    168c:	a1 fe       	sbrs	r10, 1
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <vfprintf+0x364>
    1690:	8b e2       	ldi	r24, 0x2B	; 43
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <vfprintf+0x366>
    1694:	80 e2       	ldi	r24, 0x20	; 32
    1696:	a7 fc       	sbrc	r10, 7
    1698:	8d e2       	ldi	r24, 0x2D	; 45
    169a:	b6 01       	movw	r22, r12
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 8f 0b 	call	0x171e	; 0x171e <fputc>
    16a2:	89 14       	cp	r8, r9
    16a4:	38 f4       	brcc	.+14     	; 0x16b4 <vfprintf+0x384>
    16a6:	b6 01       	movw	r22, r12
    16a8:	80 e3       	ldi	r24, 0x30	; 48
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 8f 0b 	call	0x171e	; 0x171e <fputc>
    16b0:	9a 94       	dec	r9
    16b2:	f7 cf       	rjmp	.-18     	; 0x16a2 <vfprintf+0x372>
    16b4:	8a 94       	dec	r8
    16b6:	f3 01       	movw	r30, r6
    16b8:	e8 0d       	add	r30, r8
    16ba:	f1 1d       	adc	r31, r1
    16bc:	80 81       	ld	r24, Z
    16be:	b6 01       	movw	r22, r12
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 8f 0b 	call	0x171e	; 0x171e <fputc>
    16c6:	81 10       	cpse	r8, r1
    16c8:	f5 cf       	rjmp	.-22     	; 0x16b4 <vfprintf+0x384>
    16ca:	22 20       	and	r2, r2
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <vfprintf+0x3a0>
    16ce:	42 ce       	rjmp	.-892    	; 0x1354 <vfprintf+0x24>
    16d0:	b6 01       	movw	r22, r12
    16d2:	80 e2       	ldi	r24, 0x20	; 32
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 8f 0b 	call	0x171e	; 0x171e <fputc>
    16da:	2a 94       	dec	r2
    16dc:	f6 cf       	rjmp	.-20     	; 0x16ca <vfprintf+0x39a>
    16de:	f6 01       	movw	r30, r12
    16e0:	86 81       	ldd	r24, Z+6	; 0x06
    16e2:	97 81       	ldd	r25, Z+7	; 0x07
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <vfprintf+0x3ba>
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	9f ef       	ldi	r25, 0xFF	; 255
    16ea:	2b 96       	adiw	r28, 0x0b	; 11
    16ec:	e2 e1       	ldi	r30, 0x12	; 18
    16ee:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__epilogue_restores__>

000016f2 <strnlen_P>:
    16f2:	fc 01       	movw	r30, r24
    16f4:	05 90       	lpm	r0, Z+
    16f6:	61 50       	subi	r22, 0x01	; 1
    16f8:	70 40       	sbci	r23, 0x00	; 0
    16fa:	01 10       	cpse	r0, r1
    16fc:	d8 f7       	brcc	.-10     	; 0x16f4 <strnlen_P+0x2>
    16fe:	80 95       	com	r24
    1700:	90 95       	com	r25
    1702:	8e 0f       	add	r24, r30
    1704:	9f 1f       	adc	r25, r31
    1706:	08 95       	ret

00001708 <strnlen>:
    1708:	fc 01       	movw	r30, r24
    170a:	61 50       	subi	r22, 0x01	; 1
    170c:	70 40       	sbci	r23, 0x00	; 0
    170e:	01 90       	ld	r0, Z+
    1710:	01 10       	cpse	r0, r1
    1712:	d8 f7       	brcc	.-10     	; 0x170a <strnlen+0x2>
    1714:	80 95       	com	r24
    1716:	90 95       	com	r25
    1718:	8e 0f       	add	r24, r30
    171a:	9f 1f       	adc	r25, r31
    171c:	08 95       	ret

0000171e <fputc>:
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	fb 01       	movw	r30, r22
    1728:	23 81       	ldd	r18, Z+3	; 0x03
    172a:	21 fd       	sbrc	r18, 1
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <fputc+0x16>
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	9f ef       	ldi	r25, 0xFF	; 255
    1732:	2c c0       	rjmp	.+88     	; 0x178c <fputc+0x6e>
    1734:	22 ff       	sbrs	r18, 2
    1736:	16 c0       	rjmp	.+44     	; 0x1764 <fputc+0x46>
    1738:	46 81       	ldd	r20, Z+6	; 0x06
    173a:	57 81       	ldd	r21, Z+7	; 0x07
    173c:	24 81       	ldd	r18, Z+4	; 0x04
    173e:	35 81       	ldd	r19, Z+5	; 0x05
    1740:	42 17       	cp	r20, r18
    1742:	53 07       	cpc	r21, r19
    1744:	44 f4       	brge	.+16     	; 0x1756 <fputc+0x38>
    1746:	a0 81       	ld	r26, Z
    1748:	b1 81       	ldd	r27, Z+1	; 0x01
    174a:	9d 01       	movw	r18, r26
    174c:	2f 5f       	subi	r18, 0xFF	; 255
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	31 83       	std	Z+1, r19	; 0x01
    1752:	20 83       	st	Z, r18
    1754:	8c 93       	st	X, r24
    1756:	26 81       	ldd	r18, Z+6	; 0x06
    1758:	37 81       	ldd	r19, Z+7	; 0x07
    175a:	2f 5f       	subi	r18, 0xFF	; 255
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	37 83       	std	Z+7, r19	; 0x07
    1760:	26 83       	std	Z+6, r18	; 0x06
    1762:	14 c0       	rjmp	.+40     	; 0x178c <fputc+0x6e>
    1764:	8b 01       	movw	r16, r22
    1766:	ec 01       	movw	r28, r24
    1768:	fb 01       	movw	r30, r22
    176a:	00 84       	ldd	r0, Z+8	; 0x08
    176c:	f1 85       	ldd	r31, Z+9	; 0x09
    176e:	e0 2d       	mov	r30, r0
    1770:	09 95       	icall
    1772:	89 2b       	or	r24, r25
    1774:	e1 f6       	brne	.-72     	; 0x172e <fputc+0x10>
    1776:	d8 01       	movw	r26, r16
    1778:	16 96       	adiw	r26, 0x06	; 6
    177a:	8d 91       	ld	r24, X+
    177c:	9c 91       	ld	r25, X
    177e:	17 97       	sbiw	r26, 0x07	; 7
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	17 96       	adiw	r26, 0x07	; 7
    1784:	9c 93       	st	X, r25
    1786:	8e 93       	st	-X, r24
    1788:	16 97       	sbiw	r26, 0x06	; 6
    178a:	ce 01       	movw	r24, r28
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	08 95       	ret

00001796 <__ultoa_invert>:
    1796:	fa 01       	movw	r30, r20
    1798:	aa 27       	eor	r26, r26
    179a:	28 30       	cpi	r18, 0x08	; 8
    179c:	51 f1       	breq	.+84     	; 0x17f2 <__ultoa_invert+0x5c>
    179e:	20 31       	cpi	r18, 0x10	; 16
    17a0:	81 f1       	breq	.+96     	; 0x1802 <__ultoa_invert+0x6c>
    17a2:	e8 94       	clt
    17a4:	6f 93       	push	r22
    17a6:	6e 7f       	andi	r22, 0xFE	; 254
    17a8:	6e 5f       	subi	r22, 0xFE	; 254
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	8f 4f       	sbci	r24, 0xFF	; 255
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	af 4f       	sbci	r26, 0xFF	; 255
    17b2:	b1 e0       	ldi	r27, 0x01	; 1
    17b4:	3e d0       	rcall	.+124    	; 0x1832 <__ultoa_invert+0x9c>
    17b6:	b4 e0       	ldi	r27, 0x04	; 4
    17b8:	3c d0       	rcall	.+120    	; 0x1832 <__ultoa_invert+0x9c>
    17ba:	67 0f       	add	r22, r23
    17bc:	78 1f       	adc	r23, r24
    17be:	89 1f       	adc	r24, r25
    17c0:	9a 1f       	adc	r25, r26
    17c2:	a1 1d       	adc	r26, r1
    17c4:	68 0f       	add	r22, r24
    17c6:	79 1f       	adc	r23, r25
    17c8:	8a 1f       	adc	r24, r26
    17ca:	91 1d       	adc	r25, r1
    17cc:	a1 1d       	adc	r26, r1
    17ce:	6a 0f       	add	r22, r26
    17d0:	71 1d       	adc	r23, r1
    17d2:	81 1d       	adc	r24, r1
    17d4:	91 1d       	adc	r25, r1
    17d6:	a1 1d       	adc	r26, r1
    17d8:	20 d0       	rcall	.+64     	; 0x181a <__ultoa_invert+0x84>
    17da:	09 f4       	brne	.+2      	; 0x17de <__ultoa_invert+0x48>
    17dc:	68 94       	set
    17de:	3f 91       	pop	r19
    17e0:	2a e0       	ldi	r18, 0x0A	; 10
    17e2:	26 9f       	mul	r18, r22
    17e4:	11 24       	eor	r1, r1
    17e6:	30 19       	sub	r19, r0
    17e8:	30 5d       	subi	r19, 0xD0	; 208
    17ea:	31 93       	st	Z+, r19
    17ec:	de f6       	brtc	.-74     	; 0x17a4 <__ultoa_invert+0xe>
    17ee:	cf 01       	movw	r24, r30
    17f0:	08 95       	ret
    17f2:	46 2f       	mov	r20, r22
    17f4:	47 70       	andi	r20, 0x07	; 7
    17f6:	40 5d       	subi	r20, 0xD0	; 208
    17f8:	41 93       	st	Z+, r20
    17fa:	b3 e0       	ldi	r27, 0x03	; 3
    17fc:	0f d0       	rcall	.+30     	; 0x181c <__ultoa_invert+0x86>
    17fe:	c9 f7       	brne	.-14     	; 0x17f2 <__ultoa_invert+0x5c>
    1800:	f6 cf       	rjmp	.-20     	; 0x17ee <__ultoa_invert+0x58>
    1802:	46 2f       	mov	r20, r22
    1804:	4f 70       	andi	r20, 0x0F	; 15
    1806:	40 5d       	subi	r20, 0xD0	; 208
    1808:	4a 33       	cpi	r20, 0x3A	; 58
    180a:	18 f0       	brcs	.+6      	; 0x1812 <__ultoa_invert+0x7c>
    180c:	49 5d       	subi	r20, 0xD9	; 217
    180e:	31 fd       	sbrc	r19, 1
    1810:	40 52       	subi	r20, 0x20	; 32
    1812:	41 93       	st	Z+, r20
    1814:	02 d0       	rcall	.+4      	; 0x181a <__ultoa_invert+0x84>
    1816:	a9 f7       	brne	.-22     	; 0x1802 <__ultoa_invert+0x6c>
    1818:	ea cf       	rjmp	.-44     	; 0x17ee <__ultoa_invert+0x58>
    181a:	b4 e0       	ldi	r27, 0x04	; 4
    181c:	a6 95       	lsr	r26
    181e:	97 95       	ror	r25
    1820:	87 95       	ror	r24
    1822:	77 95       	ror	r23
    1824:	67 95       	ror	r22
    1826:	ba 95       	dec	r27
    1828:	c9 f7       	brne	.-14     	; 0x181c <__ultoa_invert+0x86>
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	61 05       	cpc	r22, r1
    182e:	71 05       	cpc	r23, r1
    1830:	08 95       	ret
    1832:	9b 01       	movw	r18, r22
    1834:	ac 01       	movw	r20, r24
    1836:	0a 2e       	mov	r0, r26
    1838:	06 94       	lsr	r0
    183a:	57 95       	ror	r21
    183c:	47 95       	ror	r20
    183e:	37 95       	ror	r19
    1840:	27 95       	ror	r18
    1842:	ba 95       	dec	r27
    1844:	c9 f7       	brne	.-14     	; 0x1838 <__ultoa_invert+0xa2>
    1846:	62 0f       	add	r22, r18
    1848:	73 1f       	adc	r23, r19
    184a:	84 1f       	adc	r24, r20
    184c:	95 1f       	adc	r25, r21
    184e:	a0 1d       	adc	r26, r0
    1850:	08 95       	ret

00001852 <__prologue_saves__>:
    1852:	2f 92       	push	r2
    1854:	3f 92       	push	r3
    1856:	4f 92       	push	r4
    1858:	5f 92       	push	r5
    185a:	6f 92       	push	r6
    185c:	7f 92       	push	r7
    185e:	8f 92       	push	r8
    1860:	9f 92       	push	r9
    1862:	af 92       	push	r10
    1864:	bf 92       	push	r11
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	ca 1b       	sub	r28, r26
    187c:	db 0b       	sbc	r29, r27
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	09 94       	ijmp

0000188a <__epilogue_restores__>:
    188a:	2a 88       	ldd	r2, Y+18	; 0x12
    188c:	39 88       	ldd	r3, Y+17	; 0x11
    188e:	48 88       	ldd	r4, Y+16	; 0x10
    1890:	5f 84       	ldd	r5, Y+15	; 0x0f
    1892:	6e 84       	ldd	r6, Y+14	; 0x0e
    1894:	7d 84       	ldd	r7, Y+13	; 0x0d
    1896:	8c 84       	ldd	r8, Y+12	; 0x0c
    1898:	9b 84       	ldd	r9, Y+11	; 0x0b
    189a:	aa 84       	ldd	r10, Y+10	; 0x0a
    189c:	b9 84       	ldd	r11, Y+9	; 0x09
    189e:	c8 84       	ldd	r12, Y+8	; 0x08
    18a0:	df 80       	ldd	r13, Y+7	; 0x07
    18a2:	ee 80       	ldd	r14, Y+6	; 0x06
    18a4:	fd 80       	ldd	r15, Y+5	; 0x05
    18a6:	0c 81       	ldd	r16, Y+4	; 0x04
    18a8:	1b 81       	ldd	r17, Y+3	; 0x03
    18aa:	aa 81       	ldd	r26, Y+2	; 0x02
    18ac:	b9 81       	ldd	r27, Y+1	; 0x01
    18ae:	ce 0f       	add	r28, r30
    18b0:	d1 1d       	adc	r29, r1
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	ed 01       	movw	r28, r26
    18be:	08 95       	ret

000018c0 <_exit>:
    18c0:	f8 94       	cli

000018c2 <__stop_program>:
    18c2:	ff cf       	rjmp	.-2      	; 0x18c2 <__stop_program>
